// Code generated by MockGen. DO NOT EDIT.
// Source: two_phase_commit.go
//
// Generated by this command:
//
//	mockgen -source two_phase_commit.go -destination two_phase_commit_mocks.go -package utils
//

// Package utils is a generated GoMock package.
package utils

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCheckpointCoordinator is a mock of CheckpointCoordinator interface.
type MockCheckpointCoordinator struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointCoordinatorMockRecorder
}

// MockCheckpointCoordinatorMockRecorder is the mock recorder for MockCheckpointCoordinator.
type MockCheckpointCoordinatorMockRecorder struct {
	mock *MockCheckpointCoordinator
}

// NewMockCheckpointCoordinator creates a new mock instance.
func NewMockCheckpointCoordinator(ctrl *gomock.Controller) *MockCheckpointCoordinator {
	mock := &MockCheckpointCoordinator{ctrl: ctrl}
	mock.recorder = &MockCheckpointCoordinatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckpointCoordinator) EXPECT() *MockCheckpointCoordinatorMockRecorder {
	return m.recorder
}

// CreateCheckpoint mocks base method.
func (m *MockCheckpointCoordinator) CreateCheckpoint() (Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCheckpoint")
	ret0, _ := ret[0].(Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCheckpoint indicates an expected call of CreateCheckpoint.
func (mr *MockCheckpointCoordinatorMockRecorder) CreateCheckpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCheckpoint", reflect.TypeOf((*MockCheckpointCoordinator)(nil).CreateCheckpoint))
}

// GetLastCheckpoint mocks base method.
func (m *MockCheckpointCoordinator) GetLastCheckpoint() Checkpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCheckpoint")
	ret0, _ := ret[0].(Checkpoint)
	return ret0
}

// GetLastCheckpoint indicates an expected call of GetLastCheckpoint.
func (mr *MockCheckpointCoordinatorMockRecorder) GetLastCheckpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCheckpoint", reflect.TypeOf((*MockCheckpointCoordinator)(nil).GetLastCheckpoint))
}

// MockCheckpointParticipant is a mock of CheckpointParticipant interface.
type MockCheckpointParticipant struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointParticipantMockRecorder
}

// MockCheckpointParticipantMockRecorder is the mock recorder for MockCheckpointParticipant.
type MockCheckpointParticipantMockRecorder struct {
	mock *MockCheckpointParticipant
}

// NewMockCheckpointParticipant creates a new mock instance.
func NewMockCheckpointParticipant(ctrl *gomock.Controller) *MockCheckpointParticipant {
	mock := &MockCheckpointParticipant{ctrl: ctrl}
	mock.recorder = &MockCheckpointParticipantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckpointParticipant) EXPECT() *MockCheckpointParticipantMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockCheckpointParticipant) Commit(arg0 Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockCheckpointParticipantMockRecorder) Commit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockCheckpointParticipant)(nil).Commit), arg0)
}

// IsAvailable mocks base method.
func (m *MockCheckpointParticipant) IsAvailable(arg0 Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockCheckpointParticipantMockRecorder) IsAvailable(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockCheckpointParticipant)(nil).IsAvailable), arg0)
}

// Prepare mocks base method.
func (m *MockCheckpointParticipant) Prepare(arg0 Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepare indicates an expected call of Prepare.
func (mr *MockCheckpointParticipantMockRecorder) Prepare(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockCheckpointParticipant)(nil).Prepare), arg0)
}

// Restore mocks base method.
func (m *MockCheckpointParticipant) Restore(arg0 Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockCheckpointParticipantMockRecorder) Restore(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockCheckpointParticipant)(nil).Restore), arg0)
}

// Rollback mocks base method.
func (m *MockCheckpointParticipant) Rollback(arg0 Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockCheckpointParticipantMockRecorder) Rollback(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockCheckpointParticipant)(nil).Rollback), arg0)
}
