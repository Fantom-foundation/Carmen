// Copyright (c) 2024 Fantom Foundation
//
// Use of this software is governed by the Business Source License included
// in the LICENSE file and at fantom.foundation/bsl11.
//
// Change Date: 2028-4-16
//
// On the date above, in accordance with the Business Source License, use of
// this software will be governed by the GNU Lesser General Public License v3.

// Code generated by MockGen. DO NOT EDIT.
// Source: checkpoint.go
//
// Generated by this command:
//
//	mockgen -source checkpoint.go -destination checkpoint_mocks.go -package checkpoint
//

// Package checkpoint is a generated GoMock package.
package checkpoint

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCoordinator is a mock of Coordinator interface.
type MockCoordinator struct {
	ctrl     *gomock.Controller
	recorder *MockCoordinatorMockRecorder
}

// MockCoordinatorMockRecorder is the mock recorder for MockCoordinator.
type MockCoordinatorMockRecorder struct {
	mock *MockCoordinator
}

// NewMockCoordinator creates a new mock instance.
func NewMockCoordinator(ctrl *gomock.Controller) *MockCoordinator {
	mock := &MockCoordinator{ctrl: ctrl}
	mock.recorder = &MockCoordinatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoordinator) EXPECT() *MockCoordinatorMockRecorder {
	return m.recorder
}

// CreateCheckpoint mocks base method.
func (m *MockCoordinator) CreateCheckpoint() (Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCheckpoint")
	ret0, _ := ret[0].(Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCheckpoint indicates an expected call of CreateCheckpoint.
func (mr *MockCoordinatorMockRecorder) CreateCheckpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCheckpoint", reflect.TypeOf((*MockCoordinator)(nil).CreateCheckpoint))
}

// GetCurrentCheckpoint mocks base method.
func (m *MockCoordinator) GetCurrentCheckpoint() Checkpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentCheckpoint")
	ret0, _ := ret[0].(Checkpoint)
	return ret0
}

// GetCurrentCheckpoint indicates an expected call of GetCurrentCheckpoint.
func (mr *MockCoordinatorMockRecorder) GetCurrentCheckpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentCheckpoint", reflect.TypeOf((*MockCoordinator)(nil).GetCurrentCheckpoint))
}

// Restore mocks base method.
func (m *MockCoordinator) Restore() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore")
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockCoordinatorMockRecorder) Restore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockCoordinator)(nil).Restore))
}

// MockParticipant is a mock of Participant interface.
type MockParticipant struct {
	ctrl     *gomock.Controller
	recorder *MockParticipantMockRecorder
}

// MockParticipantMockRecorder is the mock recorder for MockParticipant.
type MockParticipantMockRecorder struct {
	mock *MockParticipant
}

// NewMockParticipant creates a new mock instance.
func NewMockParticipant(ctrl *gomock.Controller) *MockParticipant {
	mock := &MockParticipant{ctrl: ctrl}
	mock.recorder = &MockParticipantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParticipant) EXPECT() *MockParticipantMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockParticipant) Abort(arg0 Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Abort indicates an expected call of Abort.
func (mr *MockParticipantMockRecorder) Abort(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockParticipant)(nil).Abort), arg0)
}

// Commit mocks base method.
func (m *MockParticipant) Commit(arg0 Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockParticipantMockRecorder) Commit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockParticipant)(nil).Commit), arg0)
}

// GuaranteeCheckpoint mocks base method.
func (m *MockParticipant) GuaranteeCheckpoint(arg0 Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuaranteeCheckpoint", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuaranteeCheckpoint indicates an expected call of GuaranteeCheckpoint.
func (mr *MockParticipantMockRecorder) GuaranteeCheckpoint(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuaranteeCheckpoint", reflect.TypeOf((*MockParticipant)(nil).GuaranteeCheckpoint), arg0)
}

// Prepare mocks base method.
func (m *MockParticipant) Prepare(arg0 Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepare indicates an expected call of Prepare.
func (mr *MockParticipantMockRecorder) Prepare(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockParticipant)(nil).Prepare), arg0)
}

// Restore mocks base method.
func (m *MockParticipant) Restore(arg0 Checkpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockParticipantMockRecorder) Restore(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockParticipant)(nil).Restore), arg0)
}
