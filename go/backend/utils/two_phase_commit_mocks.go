// Code generated by MockGen. DO NOT EDIT.
// Source: two_phase_commit.go
//
// Generated by this command:
//
//	mockgen -source two_phase_commit.go -destination two_phase_commit_mocks.go -package utils
//

// Package utils is a generated GoMock package.
package utils

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTwoPhaseCommitCoordinator is a mock of TwoPhaseCommitCoordinator interface.
type MockTwoPhaseCommitCoordinator struct {
	ctrl     *gomock.Controller
	recorder *MockTwoPhaseCommitCoordinatorMockRecorder
}

// MockTwoPhaseCommitCoordinatorMockRecorder is the mock recorder for MockTwoPhaseCommitCoordinator.
type MockTwoPhaseCommitCoordinatorMockRecorder struct {
	mock *MockTwoPhaseCommitCoordinator
}

// NewMockTwoPhaseCommitCoordinator creates a new mock instance.
func NewMockTwoPhaseCommitCoordinator(ctrl *gomock.Controller) *MockTwoPhaseCommitCoordinator {
	mock := &MockTwoPhaseCommitCoordinator{ctrl: ctrl}
	mock.recorder = &MockTwoPhaseCommitCoordinatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwoPhaseCommitCoordinator) EXPECT() *MockTwoPhaseCommitCoordinatorMockRecorder {
	return m.recorder
}

// LastCommit mocks base method.
func (m *MockTwoPhaseCommitCoordinator) LastCommit() TwoPhaseCommit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCommit")
	ret0, _ := ret[0].(TwoPhaseCommit)
	return ret0
}

// LastCommit indicates an expected call of LastCommit.
func (mr *MockTwoPhaseCommitCoordinatorMockRecorder) LastCommit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCommit", reflect.TypeOf((*MockTwoPhaseCommitCoordinator)(nil).LastCommit))
}

// RunCommit mocks base method.
func (m *MockTwoPhaseCommitCoordinator) RunCommit() (TwoPhaseCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommit")
	ret0, _ := ret[0].(TwoPhaseCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommit indicates an expected call of RunCommit.
func (mr *MockTwoPhaseCommitCoordinatorMockRecorder) RunCommit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommit", reflect.TypeOf((*MockTwoPhaseCommitCoordinator)(nil).RunCommit))
}

// MockTwoPhaseCommitParticipant is a mock of TwoPhaseCommitParticipant interface.
type MockTwoPhaseCommitParticipant struct {
	ctrl     *gomock.Controller
	recorder *MockTwoPhaseCommitParticipantMockRecorder
}

// MockTwoPhaseCommitParticipantMockRecorder is the mock recorder for MockTwoPhaseCommitParticipant.
type MockTwoPhaseCommitParticipantMockRecorder struct {
	mock *MockTwoPhaseCommitParticipant
}

// NewMockTwoPhaseCommitParticipant creates a new mock instance.
func NewMockTwoPhaseCommitParticipant(ctrl *gomock.Controller) *MockTwoPhaseCommitParticipant {
	mock := &MockTwoPhaseCommitParticipant{ctrl: ctrl}
	mock.recorder = &MockTwoPhaseCommitParticipantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwoPhaseCommitParticipant) EXPECT() *MockTwoPhaseCommitParticipantMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTwoPhaseCommitParticipant) Commit(arg0 TwoPhaseCommit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTwoPhaseCommitParticipantMockRecorder) Commit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTwoPhaseCommitParticipant)(nil).Commit), arg0)
}

// Prepare mocks base method.
func (m *MockTwoPhaseCommitParticipant) Prepare(arg0 TwoPhaseCommit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepare indicates an expected call of Prepare.
func (mr *MockTwoPhaseCommitParticipantMockRecorder) Prepare(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockTwoPhaseCommitParticipant)(nil).Prepare), arg0)
}

// Rollback mocks base method.
func (m *MockTwoPhaseCommitParticipant) Rollback(arg0 TwoPhaseCommit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTwoPhaseCommitParticipantMockRecorder) Rollback(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTwoPhaseCommitParticipant)(nil).Rollback), arg0)
}
