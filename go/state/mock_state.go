// Code generated by MockGen. DO NOT EDIT.
// Source: state.go

// Package state is a generated GoMock package.
package state

import (
	reflect "reflect"

	common "github.com/Fantom-foundation/Carmen/go/common"
	gomock "github.com/golang/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockState) Apply(block uint64, update common.Update) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", block, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockStateMockRecorder) Apply(block, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockState)(nil).Apply), block, update)
}

// Close mocks base method.
func (m *MockState) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStateMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockState)(nil).Close))
}

// Flush mocks base method.
func (m *MockState) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockStateMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockState)(nil).Flush))
}

// GetAccountState mocks base method.
func (m *MockState) GetAccountState(address common.Address) (common.AccountState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountState", address)
	ret0, _ := ret[0].(common.AccountState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountState indicates an expected call of GetAccountState.
func (mr *MockStateMockRecorder) GetAccountState(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountState", reflect.TypeOf((*MockState)(nil).GetAccountState), address)
}

// GetArchiveState mocks base method.
func (m *MockState) GetArchiveState(block uint64) (State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveState", block)
	ret0, _ := ret[0].(State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveState indicates an expected call of GetArchiveState.
func (mr *MockStateMockRecorder) GetArchiveState(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveState", reflect.TypeOf((*MockState)(nil).GetArchiveState), block)
}

// GetBalance mocks base method.
func (m *MockState) GetBalance(address common.Address) (common.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", address)
	ret0, _ := ret[0].(common.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStateMockRecorder) GetBalance(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockState)(nil).GetBalance), address)
}

// GetCode mocks base method.
func (m *MockState) GetCode(address common.Address) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", address)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode.
func (mr *MockStateMockRecorder) GetCode(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockState)(nil).GetCode), address)
}

// GetCodeHash mocks base method.
func (m *MockState) GetCodeHash(address common.Address) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", address)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockStateMockRecorder) GetCodeHash(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockState)(nil).GetCodeHash), address)
}

// GetCodeSize mocks base method.
func (m *MockState) GetCodeSize(address common.Address) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", address)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockStateMockRecorder) GetCodeSize(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockState)(nil).GetCodeSize), address)
}

// GetHash mocks base method.
func (m *MockState) GetHash() (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHash indicates an expected call of GetHash.
func (mr *MockStateMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockState)(nil).GetHash))
}

// GetMemoryFootprint mocks base method.
func (m *MockState) GetMemoryFootprint() *common.MemoryFootprint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryFootprint")
	ret0, _ := ret[0].(*common.MemoryFootprint)
	return ret0
}

// GetMemoryFootprint indicates an expected call of GetMemoryFootprint.
func (mr *MockStateMockRecorder) GetMemoryFootprint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryFootprint", reflect.TypeOf((*MockState)(nil).GetMemoryFootprint))
}

// GetNonce mocks base method.
func (m *MockState) GetNonce(address common.Address) (common.Nonce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", address)
	ret0, _ := ret[0].(common.Nonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockStateMockRecorder) GetNonce(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockState)(nil).GetNonce), address)
}

// GetStorage mocks base method.
func (m *MockState) GetStorage(address common.Address, key common.Key) (common.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorage", address, key)
	ret0, _ := ret[0].(common.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorage indicates an expected call of GetStorage.
func (mr *MockStateMockRecorder) GetStorage(address, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorage", reflect.TypeOf((*MockState)(nil).GetStorage), address, key)
}

// MockdirectUpdateState is a mock of directUpdateState interface.
type MockdirectUpdateState struct {
	ctrl     *gomock.Controller
	recorder *MockdirectUpdateStateMockRecorder
}

// MockdirectUpdateStateMockRecorder is the mock recorder for MockdirectUpdateState.
type MockdirectUpdateStateMockRecorder struct {
	mock *MockdirectUpdateState
}

// NewMockdirectUpdateState creates a new mock instance.
func NewMockdirectUpdateState(ctrl *gomock.Controller) *MockdirectUpdateState {
	mock := &MockdirectUpdateState{ctrl: ctrl}
	mock.recorder = &MockdirectUpdateStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdirectUpdateState) EXPECT() *MockdirectUpdateStateMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockdirectUpdateState) Apply(block uint64, update common.Update) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", block, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockdirectUpdateStateMockRecorder) Apply(block, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockdirectUpdateState)(nil).Apply), block, update)
}

// Close mocks base method.
func (m *MockdirectUpdateState) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockdirectUpdateStateMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockdirectUpdateState)(nil).Close))
}

// Flush mocks base method.
func (m *MockdirectUpdateState) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockdirectUpdateStateMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockdirectUpdateState)(nil).Flush))
}

// GetAccountState mocks base method.
func (m *MockdirectUpdateState) GetAccountState(address common.Address) (common.AccountState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountState", address)
	ret0, _ := ret[0].(common.AccountState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountState indicates an expected call of GetAccountState.
func (mr *MockdirectUpdateStateMockRecorder) GetAccountState(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountState", reflect.TypeOf((*MockdirectUpdateState)(nil).GetAccountState), address)
}

// GetArchiveState mocks base method.
func (m *MockdirectUpdateState) GetArchiveState(block uint64) (State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveState", block)
	ret0, _ := ret[0].(State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveState indicates an expected call of GetArchiveState.
func (mr *MockdirectUpdateStateMockRecorder) GetArchiveState(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveState", reflect.TypeOf((*MockdirectUpdateState)(nil).GetArchiveState), block)
}

// GetBalance mocks base method.
func (m *MockdirectUpdateState) GetBalance(address common.Address) (common.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", address)
	ret0, _ := ret[0].(common.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockdirectUpdateStateMockRecorder) GetBalance(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockdirectUpdateState)(nil).GetBalance), address)
}

// GetCode mocks base method.
func (m *MockdirectUpdateState) GetCode(address common.Address) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", address)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode.
func (mr *MockdirectUpdateStateMockRecorder) GetCode(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockdirectUpdateState)(nil).GetCode), address)
}

// GetCodeHash mocks base method.
func (m *MockdirectUpdateState) GetCodeHash(address common.Address) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", address)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockdirectUpdateStateMockRecorder) GetCodeHash(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockdirectUpdateState)(nil).GetCodeHash), address)
}

// GetCodeSize mocks base method.
func (m *MockdirectUpdateState) GetCodeSize(address common.Address) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", address)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockdirectUpdateStateMockRecorder) GetCodeSize(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockdirectUpdateState)(nil).GetCodeSize), address)
}

// GetHash mocks base method.
func (m *MockdirectUpdateState) GetHash() (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHash indicates an expected call of GetHash.
func (mr *MockdirectUpdateStateMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockdirectUpdateState)(nil).GetHash))
}

// GetMemoryFootprint mocks base method.
func (m *MockdirectUpdateState) GetMemoryFootprint() *common.MemoryFootprint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryFootprint")
	ret0, _ := ret[0].(*common.MemoryFootprint)
	return ret0
}

// GetMemoryFootprint indicates an expected call of GetMemoryFootprint.
func (mr *MockdirectUpdateStateMockRecorder) GetMemoryFootprint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryFootprint", reflect.TypeOf((*MockdirectUpdateState)(nil).GetMemoryFootprint))
}

// GetNonce mocks base method.
func (m *MockdirectUpdateState) GetNonce(address common.Address) (common.Nonce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", address)
	ret0, _ := ret[0].(common.Nonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockdirectUpdateStateMockRecorder) GetNonce(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockdirectUpdateState)(nil).GetNonce), address)
}

// GetStorage mocks base method.
func (m *MockdirectUpdateState) GetStorage(address common.Address, key common.Key) (common.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorage", address, key)
	ret0, _ := ret[0].(common.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorage indicates an expected call of GetStorage.
func (mr *MockdirectUpdateStateMockRecorder) GetStorage(address, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorage", reflect.TypeOf((*MockdirectUpdateState)(nil).GetStorage), address, key)
}

// createAccount mocks base method.
func (m *MockdirectUpdateState) createAccount(address common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createAccount", address)
	ret0, _ := ret[0].(error)
	return ret0
}

// createAccount indicates an expected call of createAccount.
func (mr *MockdirectUpdateStateMockRecorder) createAccount(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createAccount", reflect.TypeOf((*MockdirectUpdateState)(nil).createAccount), address)
}

// deleteAccount mocks base method.
func (m *MockdirectUpdateState) deleteAccount(address common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteAccount", address)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteAccount indicates an expected call of deleteAccount.
func (mr *MockdirectUpdateStateMockRecorder) deleteAccount(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteAccount", reflect.TypeOf((*MockdirectUpdateState)(nil).deleteAccount), address)
}

// setBalance mocks base method.
func (m *MockdirectUpdateState) setBalance(address common.Address, balance common.Balance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setBalance", address, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// setBalance indicates an expected call of setBalance.
func (mr *MockdirectUpdateStateMockRecorder) setBalance(address, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setBalance", reflect.TypeOf((*MockdirectUpdateState)(nil).setBalance), address, balance)
}

// setCode mocks base method.
func (m *MockdirectUpdateState) setCode(address common.Address, code []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setCode", address, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// setCode indicates an expected call of setCode.
func (mr *MockdirectUpdateStateMockRecorder) setCode(address, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setCode", reflect.TypeOf((*MockdirectUpdateState)(nil).setCode), address, code)
}

// setNonce mocks base method.
func (m *MockdirectUpdateState) setNonce(address common.Address, nonce common.Nonce) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setNonce", address, nonce)
	ret0, _ := ret[0].(error)
	return ret0
}

// setNonce indicates an expected call of setNonce.
func (mr *MockdirectUpdateStateMockRecorder) setNonce(address, nonce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setNonce", reflect.TypeOf((*MockdirectUpdateState)(nil).setNonce), address, nonce)
}

// setStorage mocks base method.
func (m *MockdirectUpdateState) setStorage(address common.Address, key common.Key, value common.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setStorage", address, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// setStorage indicates an expected call of setStorage.
func (mr *MockdirectUpdateStateMockRecorder) setStorage(address, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setStorage", reflect.TypeOf((*MockdirectUpdateState)(nil).setStorage), address, key, value)
}
