//
// Copyright (c) 2024 Fantom Foundation
//
// Use of this software is governed by the Business Source License included
// in the LICENSE.TXT file and at fantom.foundation/bsl11.
//
// Change Date: 2028-4-16
//
// On the date above, in accordance with the Business Source License, use
// of this software will be governed by the GNU Lesser General Public Licence v3 
//

// Code generated by MockGen. DO NOT EDIT.
// Source: state_db.go
//
// Generated by this command:
//
//	mockgen -source state_db.go -destination state_db_mock.go -package state
//
// Package state is a generated GoMock package.
package state

import (
	big "math/big"
	reflect "reflect"

	common "github.com/Fantom-foundation/Carmen/go/common"
	gomock "go.uber.org/mock/gomock"
)

// MockVmStateDB is a mock of VmStateDB interface.
type MockVmStateDB struct {
	ctrl     *gomock.Controller
	recorder *MockVmStateDBMockRecorder
}

// MockVmStateDBMockRecorder is the mock recorder for MockVmStateDB.
type MockVmStateDBMockRecorder struct {
	mock *MockVmStateDB
}

// NewMockVmStateDB creates a new mock instance.
func NewMockVmStateDB(ctrl *gomock.Controller) *MockVmStateDB {
	mock := &MockVmStateDB{ctrl: ctrl}
	mock.recorder = &MockVmStateDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVmStateDB) EXPECT() *MockVmStateDBMockRecorder {
	return m.recorder
}

// AbortTransaction mocks base method.
func (m *MockVmStateDB) AbortTransaction() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AbortTransaction")
}

// AbortTransaction indicates an expected call of AbortTransaction.
func (mr *MockVmStateDBMockRecorder) AbortTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortTransaction", reflect.TypeOf((*MockVmStateDB)(nil).AbortTransaction))
}

// AddAddressToAccessList mocks base method.
func (m *MockVmStateDB) AddAddressToAccessList(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAddressToAccessList", arg0)
}

// AddAddressToAccessList indicates an expected call of AddAddressToAccessList.
func (mr *MockVmStateDBMockRecorder) AddAddressToAccessList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddressToAccessList", reflect.TypeOf((*MockVmStateDB)(nil).AddAddressToAccessList), arg0)
}

// AddBalance mocks base method.
func (m *MockVmStateDB) AddBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBalance", arg0, arg1)
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockVmStateDBMockRecorder) AddBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockVmStateDB)(nil).AddBalance), arg0, arg1)
}

// AddLog mocks base method.
func (m *MockVmStateDB) AddLog(arg0 *common.Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLog", arg0)
}

// AddLog indicates an expected call of AddLog.
func (mr *MockVmStateDBMockRecorder) AddLog(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLog", reflect.TypeOf((*MockVmStateDB)(nil).AddLog), arg0)
}

// AddRefund mocks base method.
func (m *MockVmStateDB) AddRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRefund", arg0)
}

// AddRefund indicates an expected call of AddRefund.
func (mr *MockVmStateDBMockRecorder) AddRefund(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefund", reflect.TypeOf((*MockVmStateDB)(nil).AddRefund), arg0)
}

// AddSlotToAccessList mocks base method.
func (m *MockVmStateDB) AddSlotToAccessList(arg0 common.Address, arg1 common.Key) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSlotToAccessList", arg0, arg1)
}

// AddSlotToAccessList indicates an expected call of AddSlotToAccessList.
func (mr *MockVmStateDBMockRecorder) AddSlotToAccessList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlotToAccessList", reflect.TypeOf((*MockVmStateDB)(nil).AddSlotToAccessList), arg0, arg1)
}

// BeginTransaction mocks base method.
func (m *MockVmStateDB) BeginTransaction() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginTransaction")
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockVmStateDBMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockVmStateDB)(nil).BeginTransaction))
}

// Check mocks base method.
func (m *MockVmStateDB) Check() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockVmStateDBMockRecorder) Check() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockVmStateDB)(nil).Check))
}

// ClearAccessList mocks base method.
func (m *MockVmStateDB) ClearAccessList() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearAccessList")
}

// ClearAccessList indicates an expected call of ClearAccessList.
func (mr *MockVmStateDBMockRecorder) ClearAccessList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAccessList", reflect.TypeOf((*MockVmStateDB)(nil).ClearAccessList))
}

// CreateAccount mocks base method.
func (m *MockVmStateDB) CreateAccount(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAccount", arg0)
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockVmStateDBMockRecorder) CreateAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockVmStateDB)(nil).CreateAccount), arg0)
}

// Empty mocks base method.
func (m *MockVmStateDB) Empty(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty.
func (mr *MockVmStateDBMockRecorder) Empty(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockVmStateDB)(nil).Empty), arg0)
}

// EndTransaction mocks base method.
func (m *MockVmStateDB) EndTransaction() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndTransaction")
}

// EndTransaction indicates an expected call of EndTransaction.
func (mr *MockVmStateDBMockRecorder) EndTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTransaction", reflect.TypeOf((*MockVmStateDB)(nil).EndTransaction))
}

// Exist mocks base method.
func (m *MockVmStateDB) Exist(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockVmStateDBMockRecorder) Exist(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockVmStateDB)(nil).Exist), arg0)
}

// GetBalance mocks base method.
func (m *MockVmStateDB) GetBalance(arg0 common.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockVmStateDBMockRecorder) GetBalance(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockVmStateDB)(nil).GetBalance), arg0)
}

// GetCode mocks base method.
func (m *MockVmStateDB) GetCode(arg0 common.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockVmStateDBMockRecorder) GetCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockVmStateDB)(nil).GetCode), arg0)
}

// GetCodeHash mocks base method.
func (m *MockVmStateDB) GetCodeHash(arg0 common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockVmStateDBMockRecorder) GetCodeHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockVmStateDB)(nil).GetCodeHash), arg0)
}

// GetCodeSize mocks base method.
func (m *MockVmStateDB) GetCodeSize(arg0 common.Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockVmStateDBMockRecorder) GetCodeSize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockVmStateDB)(nil).GetCodeSize), arg0)
}

// GetCommittedState mocks base method.
func (m *MockVmStateDB) GetCommittedState(arg0 common.Address, arg1 common.Key) common.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedState", arg0, arg1)
	ret0, _ := ret[0].(common.Value)
	return ret0
}

// GetCommittedState indicates an expected call of GetCommittedState.
func (mr *MockVmStateDBMockRecorder) GetCommittedState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedState", reflect.TypeOf((*MockVmStateDB)(nil).GetCommittedState), arg0, arg1)
}

// GetHash mocks base method.
func (m *MockVmStateDB) GetHash() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetHash indicates an expected call of GetHash.
func (mr *MockVmStateDBMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockVmStateDB)(nil).GetHash))
}

// GetLogs mocks base method.
func (m *MockVmStateDB) GetLogs() []*common.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs")
	ret0, _ := ret[0].([]*common.Log)
	return ret0
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockVmStateDBMockRecorder) GetLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockVmStateDB)(nil).GetLogs))
}

// GetNonce mocks base method.
func (m *MockVmStateDB) GetNonce(arg0 common.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockVmStateDBMockRecorder) GetNonce(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockVmStateDB)(nil).GetNonce), arg0)
}

// GetRefund mocks base method.
func (m *MockVmStateDB) GetRefund() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefund")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRefund indicates an expected call of GetRefund.
func (mr *MockVmStateDBMockRecorder) GetRefund() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefund", reflect.TypeOf((*MockVmStateDB)(nil).GetRefund))
}

// GetState mocks base method.
func (m *MockVmStateDB) GetState(arg0 common.Address, arg1 common.Key) common.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(common.Value)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockVmStateDBMockRecorder) GetState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockVmStateDB)(nil).GetState), arg0, arg1)
}

// GetTransactionChanges mocks base method.
func (m *MockVmStateDB) GetTransactionChanges() map[common.Address][]common.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionChanges")
	ret0, _ := ret[0].(map[common.Address][]common.Key)
	return ret0
}

// GetTransactionChanges indicates an expected call of GetTransactionChanges.
func (mr *MockVmStateDBMockRecorder) GetTransactionChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionChanges", reflect.TypeOf((*MockVmStateDB)(nil).GetTransactionChanges))
}

// HasSuicided mocks base method.
func (m *MockVmStateDB) HasSuicided(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSuicided", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSuicided indicates an expected call of HasSuicided.
func (mr *MockVmStateDBMockRecorder) HasSuicided(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSuicided", reflect.TypeOf((*MockVmStateDB)(nil).HasSuicided), arg0)
}

// IsAddressInAccessList mocks base method.
func (m *MockVmStateDB) IsAddressInAccessList(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAddressInAccessList", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAddressInAccessList indicates an expected call of IsAddressInAccessList.
func (mr *MockVmStateDBMockRecorder) IsAddressInAccessList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAddressInAccessList", reflect.TypeOf((*MockVmStateDB)(nil).IsAddressInAccessList), arg0)
}

// IsSlotInAccessList mocks base method.
func (m *MockVmStateDB) IsSlotInAccessList(arg0 common.Address, arg1 common.Key) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSlotInAccessList", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IsSlotInAccessList indicates an expected call of IsSlotInAccessList.
func (mr *MockVmStateDBMockRecorder) IsSlotInAccessList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSlotInAccessList", reflect.TypeOf((*MockVmStateDB)(nil).IsSlotInAccessList), arg0, arg1)
}

// RevertToSnapshot mocks base method.
func (m *MockVmStateDB) RevertToSnapshot(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevertToSnapshot", arg0)
}

// RevertToSnapshot indicates an expected call of RevertToSnapshot.
func (mr *MockVmStateDBMockRecorder) RevertToSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertToSnapshot", reflect.TypeOf((*MockVmStateDB)(nil).RevertToSnapshot), arg0)
}

// SetCode mocks base method.
func (m *MockVmStateDB) SetCode(arg0 common.Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockVmStateDBMockRecorder) SetCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockVmStateDB)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockVmStateDB) SetNonce(arg0 common.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockVmStateDBMockRecorder) SetNonce(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockVmStateDB)(nil).SetNonce), arg0, arg1)
}

// SetState mocks base method.
func (m *MockVmStateDB) SetState(arg0 common.Address, arg1 common.Key, arg2 common.Value) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0, arg1, arg2)
}

// SetState indicates an expected call of SetState.
func (mr *MockVmStateDBMockRecorder) SetState(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockVmStateDB)(nil).SetState), arg0, arg1, arg2)
}

// Snapshot mocks base method.
func (m *MockVmStateDB) Snapshot() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(int)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockVmStateDBMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockVmStateDB)(nil).Snapshot))
}

// SubBalance mocks base method.
func (m *MockVmStateDB) SubBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubBalance", arg0, arg1)
}

// SubBalance indicates an expected call of SubBalance.
func (mr *MockVmStateDBMockRecorder) SubBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubBalance", reflect.TypeOf((*MockVmStateDB)(nil).SubBalance), arg0, arg1)
}

// SubRefund mocks base method.
func (m *MockVmStateDB) SubRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubRefund", arg0)
}

// SubRefund indicates an expected call of SubRefund.
func (mr *MockVmStateDBMockRecorder) SubRefund(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubRefund", reflect.TypeOf((*MockVmStateDB)(nil).SubRefund), arg0)
}

// Suicide mocks base method.
func (m *MockVmStateDB) Suicide(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suicide", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Suicide indicates an expected call of Suicide.
func (mr *MockVmStateDBMockRecorder) Suicide(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suicide", reflect.TypeOf((*MockVmStateDB)(nil).Suicide), arg0)
}

// MockStateDB is a mock of StateDB interface.
type MockStateDB struct {
	ctrl     *gomock.Controller
	recorder *MockStateDBMockRecorder
}

// MockStateDBMockRecorder is the mock recorder for MockStateDB.
type MockStateDBMockRecorder struct {
	mock *MockStateDB
}

// NewMockStateDB creates a new mock instance.
func NewMockStateDB(ctrl *gomock.Controller) *MockStateDB {
	mock := &MockStateDB{ctrl: ctrl}
	mock.recorder = &MockStateDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateDB) EXPECT() *MockStateDBMockRecorder {
	return m.recorder
}

// AbortTransaction mocks base method.
func (m *MockStateDB) AbortTransaction() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AbortTransaction")
}

// AbortTransaction indicates an expected call of AbortTransaction.
func (mr *MockStateDBMockRecorder) AbortTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortTransaction", reflect.TypeOf((*MockStateDB)(nil).AbortTransaction))
}

// AddAddressToAccessList mocks base method.
func (m *MockStateDB) AddAddressToAccessList(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAddressToAccessList", arg0)
}

// AddAddressToAccessList indicates an expected call of AddAddressToAccessList.
func (mr *MockStateDBMockRecorder) AddAddressToAccessList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddressToAccessList", reflect.TypeOf((*MockStateDB)(nil).AddAddressToAccessList), arg0)
}

// AddBalance mocks base method.
func (m *MockStateDB) AddBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBalance", arg0, arg1)
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockStateDBMockRecorder) AddBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockStateDB)(nil).AddBalance), arg0, arg1)
}

// AddLog mocks base method.
func (m *MockStateDB) AddLog(arg0 *common.Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLog", arg0)
}

// AddLog indicates an expected call of AddLog.
func (mr *MockStateDBMockRecorder) AddLog(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLog", reflect.TypeOf((*MockStateDB)(nil).AddLog), arg0)
}

// AddRefund mocks base method.
func (m *MockStateDB) AddRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRefund", arg0)
}

// AddRefund indicates an expected call of AddRefund.
func (mr *MockStateDBMockRecorder) AddRefund(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefund", reflect.TypeOf((*MockStateDB)(nil).AddRefund), arg0)
}

// AddSlotToAccessList mocks base method.
func (m *MockStateDB) AddSlotToAccessList(arg0 common.Address, arg1 common.Key) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSlotToAccessList", arg0, arg1)
}

// AddSlotToAccessList indicates an expected call of AddSlotToAccessList.
func (mr *MockStateDBMockRecorder) AddSlotToAccessList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlotToAccessList", reflect.TypeOf((*MockStateDB)(nil).AddSlotToAccessList), arg0, arg1)
}

// BeginBlock mocks base method.
func (m *MockStateDB) BeginBlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginBlock")
}

// BeginBlock indicates an expected call of BeginBlock.
func (mr *MockStateDBMockRecorder) BeginBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginBlock", reflect.TypeOf((*MockStateDB)(nil).BeginBlock))
}

// BeginEpoch mocks base method.
func (m *MockStateDB) BeginEpoch() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginEpoch")
}

// BeginEpoch indicates an expected call of BeginEpoch.
func (mr *MockStateDBMockRecorder) BeginEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginEpoch", reflect.TypeOf((*MockStateDB)(nil).BeginEpoch))
}

// BeginTransaction mocks base method.
func (m *MockStateDB) BeginTransaction() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginTransaction")
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockStateDBMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockStateDB)(nil).BeginTransaction))
}

// Check mocks base method.
func (m *MockStateDB) Check() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockStateDBMockRecorder) Check() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockStateDB)(nil).Check))
}

// ClearAccessList mocks base method.
func (m *MockStateDB) ClearAccessList() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearAccessList")
}

// ClearAccessList indicates an expected call of ClearAccessList.
func (mr *MockStateDBMockRecorder) ClearAccessList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAccessList", reflect.TypeOf((*MockStateDB)(nil).ClearAccessList))
}

// Close mocks base method.
func (m *MockStateDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStateDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStateDB)(nil).Close))
}

// CreateAccount mocks base method.
func (m *MockStateDB) CreateAccount(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAccount", arg0)
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStateDBMockRecorder) CreateAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStateDB)(nil).CreateAccount), arg0)
}

// Empty mocks base method.
func (m *MockStateDB) Empty(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty.
func (mr *MockStateDBMockRecorder) Empty(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockStateDB)(nil).Empty), arg0)
}

// EndBlock mocks base method.
func (m *MockStateDB) EndBlock(number uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndBlock", number)
}

// EndBlock indicates an expected call of EndBlock.
func (mr *MockStateDBMockRecorder) EndBlock(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndBlock", reflect.TypeOf((*MockStateDB)(nil).EndBlock), number)
}

// EndEpoch mocks base method.
func (m *MockStateDB) EndEpoch(number uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndEpoch", number)
}

// EndEpoch indicates an expected call of EndEpoch.
func (mr *MockStateDBMockRecorder) EndEpoch(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndEpoch", reflect.TypeOf((*MockStateDB)(nil).EndEpoch), number)
}

// EndTransaction mocks base method.
func (m *MockStateDB) EndTransaction() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndTransaction")
}

// EndTransaction indicates an expected call of EndTransaction.
func (mr *MockStateDBMockRecorder) EndTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTransaction", reflect.TypeOf((*MockStateDB)(nil).EndTransaction))
}

// Exist mocks base method.
func (m *MockStateDB) Exist(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockStateDBMockRecorder) Exist(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockStateDB)(nil).Exist), arg0)
}

// Flush mocks base method.
func (m *MockStateDB) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockStateDBMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockStateDB)(nil).Flush))
}

// GetArchiveBlockHeight mocks base method.
func (m *MockStateDB) GetArchiveBlockHeight() (uint64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveBlockHeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetArchiveBlockHeight indicates an expected call of GetArchiveBlockHeight.
func (mr *MockStateDBMockRecorder) GetArchiveBlockHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveBlockHeight", reflect.TypeOf((*MockStateDB)(nil).GetArchiveBlockHeight))
}

// GetArchiveStateDB mocks base method.
func (m *MockStateDB) GetArchiveStateDB(block uint64) (NonCommittableStateDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveStateDB", block)
	ret0, _ := ret[0].(NonCommittableStateDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveStateDB indicates an expected call of GetArchiveStateDB.
func (mr *MockStateDBMockRecorder) GetArchiveStateDB(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveStateDB", reflect.TypeOf((*MockStateDB)(nil).GetArchiveStateDB), block)
}

// GetBalance mocks base method.
func (m *MockStateDB) GetBalance(arg0 common.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStateDBMockRecorder) GetBalance(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStateDB)(nil).GetBalance), arg0)
}

// GetCode mocks base method.
func (m *MockStateDB) GetCode(arg0 common.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockStateDBMockRecorder) GetCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockStateDB)(nil).GetCode), arg0)
}

// GetCodeHash mocks base method.
func (m *MockStateDB) GetCodeHash(arg0 common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockStateDBMockRecorder) GetCodeHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockStateDB)(nil).GetCodeHash), arg0)
}

// GetCodeSize mocks base method.
func (m *MockStateDB) GetCodeSize(arg0 common.Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockStateDBMockRecorder) GetCodeSize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockStateDB)(nil).GetCodeSize), arg0)
}

// GetCommittedState mocks base method.
func (m *MockStateDB) GetCommittedState(arg0 common.Address, arg1 common.Key) common.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedState", arg0, arg1)
	ret0, _ := ret[0].(common.Value)
	return ret0
}

// GetCommittedState indicates an expected call of GetCommittedState.
func (mr *MockStateDBMockRecorder) GetCommittedState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedState", reflect.TypeOf((*MockStateDB)(nil).GetCommittedState), arg0, arg1)
}

// GetHash mocks base method.
func (m *MockStateDB) GetHash() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetHash indicates an expected call of GetHash.
func (mr *MockStateDBMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockStateDB)(nil).GetHash))
}

// GetLogs mocks base method.
func (m *MockStateDB) GetLogs() []*common.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs")
	ret0, _ := ret[0].([]*common.Log)
	return ret0
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockStateDBMockRecorder) GetLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockStateDB)(nil).GetLogs))
}

// GetMemoryFootprint mocks base method.
func (m *MockStateDB) GetMemoryFootprint() *common.MemoryFootprint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryFootprint")
	ret0, _ := ret[0].(*common.MemoryFootprint)
	return ret0
}

// GetMemoryFootprint indicates an expected call of GetMemoryFootprint.
func (mr *MockStateDBMockRecorder) GetMemoryFootprint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryFootprint", reflect.TypeOf((*MockStateDB)(nil).GetMemoryFootprint))
}

// GetNonce mocks base method.
func (m *MockStateDB) GetNonce(arg0 common.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockStateDBMockRecorder) GetNonce(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockStateDB)(nil).GetNonce), arg0)
}

// GetRefund mocks base method.
func (m *MockStateDB) GetRefund() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefund")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRefund indicates an expected call of GetRefund.
func (mr *MockStateDBMockRecorder) GetRefund() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefund", reflect.TypeOf((*MockStateDB)(nil).GetRefund))
}

// GetState mocks base method.
func (m *MockStateDB) GetState(arg0 common.Address, arg1 common.Key) common.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(common.Value)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockStateDBMockRecorder) GetState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockStateDB)(nil).GetState), arg0, arg1)
}

// GetTransactionChanges mocks base method.
func (m *MockStateDB) GetTransactionChanges() map[common.Address][]common.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionChanges")
	ret0, _ := ret[0].(map[common.Address][]common.Key)
	return ret0
}

// GetTransactionChanges indicates an expected call of GetTransactionChanges.
func (mr *MockStateDBMockRecorder) GetTransactionChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionChanges", reflect.TypeOf((*MockStateDB)(nil).GetTransactionChanges))
}

// HasSuicided mocks base method.
func (m *MockStateDB) HasSuicided(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSuicided", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSuicided indicates an expected call of HasSuicided.
func (mr *MockStateDBMockRecorder) HasSuicided(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSuicided", reflect.TypeOf((*MockStateDB)(nil).HasSuicided), arg0)
}

// IsAddressInAccessList mocks base method.
func (m *MockStateDB) IsAddressInAccessList(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAddressInAccessList", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAddressInAccessList indicates an expected call of IsAddressInAccessList.
func (mr *MockStateDBMockRecorder) IsAddressInAccessList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAddressInAccessList", reflect.TypeOf((*MockStateDB)(nil).IsAddressInAccessList), arg0)
}

// IsSlotInAccessList mocks base method.
func (m *MockStateDB) IsSlotInAccessList(arg0 common.Address, arg1 common.Key) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSlotInAccessList", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IsSlotInAccessList indicates an expected call of IsSlotInAccessList.
func (mr *MockStateDBMockRecorder) IsSlotInAccessList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSlotInAccessList", reflect.TypeOf((*MockStateDB)(nil).IsSlotInAccessList), arg0, arg1)
}

// ResetBlockContext mocks base method.
func (m *MockStateDB) ResetBlockContext() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetBlockContext")
}

// ResetBlockContext indicates an expected call of ResetBlockContext.
func (mr *MockStateDBMockRecorder) ResetBlockContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetBlockContext", reflect.TypeOf((*MockStateDB)(nil).ResetBlockContext))
}

// RevertToSnapshot mocks base method.
func (m *MockStateDB) RevertToSnapshot(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevertToSnapshot", arg0)
}

// RevertToSnapshot indicates an expected call of RevertToSnapshot.
func (mr *MockStateDBMockRecorder) RevertToSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertToSnapshot", reflect.TypeOf((*MockStateDB)(nil).RevertToSnapshot), arg0)
}

// SetCode mocks base method.
func (m *MockStateDB) SetCode(arg0 common.Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockStateDBMockRecorder) SetCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockStateDB)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockStateDB) SetNonce(arg0 common.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockStateDBMockRecorder) SetNonce(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockStateDB)(nil).SetNonce), arg0, arg1)
}

// SetState mocks base method.
func (m *MockStateDB) SetState(arg0 common.Address, arg1 common.Key, arg2 common.Value) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0, arg1, arg2)
}

// SetState indicates an expected call of SetState.
func (mr *MockStateDBMockRecorder) SetState(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockStateDB)(nil).SetState), arg0, arg1, arg2)
}

// Snapshot mocks base method.
func (m *MockStateDB) Snapshot() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(int)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockStateDBMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockStateDB)(nil).Snapshot))
}

// StartBulkLoad mocks base method.
func (m *MockStateDB) StartBulkLoad(block uint64) BulkLoad {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBulkLoad", block)
	ret0, _ := ret[0].(BulkLoad)
	return ret0
}

// StartBulkLoad indicates an expected call of StartBulkLoad.
func (mr *MockStateDBMockRecorder) StartBulkLoad(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBulkLoad", reflect.TypeOf((*MockStateDB)(nil).StartBulkLoad), block)
}

// SubBalance mocks base method.
func (m *MockStateDB) SubBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubBalance", arg0, arg1)
}

// SubBalance indicates an expected call of SubBalance.
func (mr *MockStateDBMockRecorder) SubBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubBalance", reflect.TypeOf((*MockStateDB)(nil).SubBalance), arg0, arg1)
}

// SubRefund mocks base method.
func (m *MockStateDB) SubRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubRefund", arg0)
}

// SubRefund indicates an expected call of SubRefund.
func (mr *MockStateDBMockRecorder) SubRefund(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubRefund", reflect.TypeOf((*MockStateDB)(nil).SubRefund), arg0)
}

// Suicide mocks base method.
func (m *MockStateDB) Suicide(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suicide", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Suicide indicates an expected call of Suicide.
func (mr *MockStateDBMockRecorder) Suicide(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suicide", reflect.TypeOf((*MockStateDB)(nil).Suicide), arg0)
}

// MockNonCommittableStateDB is a mock of NonCommittableStateDB interface.
type MockNonCommittableStateDB struct {
	ctrl     *gomock.Controller
	recorder *MockNonCommittableStateDBMockRecorder
}

// MockNonCommittableStateDBMockRecorder is the mock recorder for MockNonCommittableStateDB.
type MockNonCommittableStateDBMockRecorder struct {
	mock *MockNonCommittableStateDB
}

// NewMockNonCommittableStateDB creates a new mock instance.
func NewMockNonCommittableStateDB(ctrl *gomock.Controller) *MockNonCommittableStateDB {
	mock := &MockNonCommittableStateDB{ctrl: ctrl}
	mock.recorder = &MockNonCommittableStateDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNonCommittableStateDB) EXPECT() *MockNonCommittableStateDBMockRecorder {
	return m.recorder
}

// AbortTransaction mocks base method.
func (m *MockNonCommittableStateDB) AbortTransaction() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AbortTransaction")
}

// AbortTransaction indicates an expected call of AbortTransaction.
func (mr *MockNonCommittableStateDBMockRecorder) AbortTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortTransaction", reflect.TypeOf((*MockNonCommittableStateDB)(nil).AbortTransaction))
}

// AddAddressToAccessList mocks base method.
func (m *MockNonCommittableStateDB) AddAddressToAccessList(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAddressToAccessList", arg0)
}

// AddAddressToAccessList indicates an expected call of AddAddressToAccessList.
func (mr *MockNonCommittableStateDBMockRecorder) AddAddressToAccessList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddressToAccessList", reflect.TypeOf((*MockNonCommittableStateDB)(nil).AddAddressToAccessList), arg0)
}

// AddBalance mocks base method.
func (m *MockNonCommittableStateDB) AddBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBalance", arg0, arg1)
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockNonCommittableStateDBMockRecorder) AddBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockNonCommittableStateDB)(nil).AddBalance), arg0, arg1)
}

// AddLog mocks base method.
func (m *MockNonCommittableStateDB) AddLog(arg0 *common.Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLog", arg0)
}

// AddLog indicates an expected call of AddLog.
func (mr *MockNonCommittableStateDBMockRecorder) AddLog(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLog", reflect.TypeOf((*MockNonCommittableStateDB)(nil).AddLog), arg0)
}

// AddRefund mocks base method.
func (m *MockNonCommittableStateDB) AddRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRefund", arg0)
}

// AddRefund indicates an expected call of AddRefund.
func (mr *MockNonCommittableStateDBMockRecorder) AddRefund(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefund", reflect.TypeOf((*MockNonCommittableStateDB)(nil).AddRefund), arg0)
}

// AddSlotToAccessList mocks base method.
func (m *MockNonCommittableStateDB) AddSlotToAccessList(arg0 common.Address, arg1 common.Key) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSlotToAccessList", arg0, arg1)
}

// AddSlotToAccessList indicates an expected call of AddSlotToAccessList.
func (mr *MockNonCommittableStateDBMockRecorder) AddSlotToAccessList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlotToAccessList", reflect.TypeOf((*MockNonCommittableStateDB)(nil).AddSlotToAccessList), arg0, arg1)
}

// BeginTransaction mocks base method.
func (m *MockNonCommittableStateDB) BeginTransaction() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginTransaction")
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockNonCommittableStateDBMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockNonCommittableStateDB)(nil).BeginTransaction))
}

// Check mocks base method.
func (m *MockNonCommittableStateDB) Check() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockNonCommittableStateDBMockRecorder) Check() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockNonCommittableStateDB)(nil).Check))
}

// ClearAccessList mocks base method.
func (m *MockNonCommittableStateDB) ClearAccessList() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearAccessList")
}

// ClearAccessList indicates an expected call of ClearAccessList.
func (mr *MockNonCommittableStateDBMockRecorder) ClearAccessList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAccessList", reflect.TypeOf((*MockNonCommittableStateDB)(nil).ClearAccessList))
}

// Copy mocks base method.
func (m *MockNonCommittableStateDB) Copy() NonCommittableStateDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(NonCommittableStateDB)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockNonCommittableStateDBMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockNonCommittableStateDB)(nil).Copy))
}

// CreateAccount mocks base method.
func (m *MockNonCommittableStateDB) CreateAccount(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAccount", arg0)
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockNonCommittableStateDBMockRecorder) CreateAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockNonCommittableStateDB)(nil).CreateAccount), arg0)
}

// Empty mocks base method.
func (m *MockNonCommittableStateDB) Empty(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty.
func (mr *MockNonCommittableStateDBMockRecorder) Empty(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockNonCommittableStateDB)(nil).Empty), arg0)
}

// EndTransaction mocks base method.
func (m *MockNonCommittableStateDB) EndTransaction() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndTransaction")
}

// EndTransaction indicates an expected call of EndTransaction.
func (mr *MockNonCommittableStateDBMockRecorder) EndTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTransaction", reflect.TypeOf((*MockNonCommittableStateDB)(nil).EndTransaction))
}

// Exist mocks base method.
func (m *MockNonCommittableStateDB) Exist(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockNonCommittableStateDBMockRecorder) Exist(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockNonCommittableStateDB)(nil).Exist), arg0)
}

// GetBalance mocks base method.
func (m *MockNonCommittableStateDB) GetBalance(arg0 common.Address) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockNonCommittableStateDBMockRecorder) GetBalance(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockNonCommittableStateDB)(nil).GetBalance), arg0)
}

// GetCode mocks base method.
func (m *MockNonCommittableStateDB) GetCode(arg0 common.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockNonCommittableStateDBMockRecorder) GetCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockNonCommittableStateDB)(nil).GetCode), arg0)
}

// GetCodeHash mocks base method.
func (m *MockNonCommittableStateDB) GetCodeHash(arg0 common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockNonCommittableStateDBMockRecorder) GetCodeHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockNonCommittableStateDB)(nil).GetCodeHash), arg0)
}

// GetCodeSize mocks base method.
func (m *MockNonCommittableStateDB) GetCodeSize(arg0 common.Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockNonCommittableStateDBMockRecorder) GetCodeSize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockNonCommittableStateDB)(nil).GetCodeSize), arg0)
}

// GetCommittedState mocks base method.
func (m *MockNonCommittableStateDB) GetCommittedState(arg0 common.Address, arg1 common.Key) common.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedState", arg0, arg1)
	ret0, _ := ret[0].(common.Value)
	return ret0
}

// GetCommittedState indicates an expected call of GetCommittedState.
func (mr *MockNonCommittableStateDBMockRecorder) GetCommittedState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedState", reflect.TypeOf((*MockNonCommittableStateDB)(nil).GetCommittedState), arg0, arg1)
}

// GetHash mocks base method.
func (m *MockNonCommittableStateDB) GetHash() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetHash indicates an expected call of GetHash.
func (mr *MockNonCommittableStateDBMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockNonCommittableStateDB)(nil).GetHash))
}

// GetLogs mocks base method.
func (m *MockNonCommittableStateDB) GetLogs() []*common.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs")
	ret0, _ := ret[0].([]*common.Log)
	return ret0
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockNonCommittableStateDBMockRecorder) GetLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockNonCommittableStateDB)(nil).GetLogs))
}

// GetNonce mocks base method.
func (m *MockNonCommittableStateDB) GetNonce(arg0 common.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockNonCommittableStateDBMockRecorder) GetNonce(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockNonCommittableStateDB)(nil).GetNonce), arg0)
}

// GetRefund mocks base method.
func (m *MockNonCommittableStateDB) GetRefund() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefund")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRefund indicates an expected call of GetRefund.
func (mr *MockNonCommittableStateDBMockRecorder) GetRefund() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefund", reflect.TypeOf((*MockNonCommittableStateDB)(nil).GetRefund))
}

// GetState mocks base method.
func (m *MockNonCommittableStateDB) GetState(arg0 common.Address, arg1 common.Key) common.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(common.Value)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockNonCommittableStateDBMockRecorder) GetState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockNonCommittableStateDB)(nil).GetState), arg0, arg1)
}

// GetTransactionChanges mocks base method.
func (m *MockNonCommittableStateDB) GetTransactionChanges() map[common.Address][]common.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionChanges")
	ret0, _ := ret[0].(map[common.Address][]common.Key)
	return ret0
}

// GetTransactionChanges indicates an expected call of GetTransactionChanges.
func (mr *MockNonCommittableStateDBMockRecorder) GetTransactionChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionChanges", reflect.TypeOf((*MockNonCommittableStateDB)(nil).GetTransactionChanges))
}

// HasSuicided mocks base method.
func (m *MockNonCommittableStateDB) HasSuicided(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSuicided", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSuicided indicates an expected call of HasSuicided.
func (mr *MockNonCommittableStateDBMockRecorder) HasSuicided(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSuicided", reflect.TypeOf((*MockNonCommittableStateDB)(nil).HasSuicided), arg0)
}

// IsAddressInAccessList mocks base method.
func (m *MockNonCommittableStateDB) IsAddressInAccessList(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAddressInAccessList", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAddressInAccessList indicates an expected call of IsAddressInAccessList.
func (mr *MockNonCommittableStateDBMockRecorder) IsAddressInAccessList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAddressInAccessList", reflect.TypeOf((*MockNonCommittableStateDB)(nil).IsAddressInAccessList), arg0)
}

// IsSlotInAccessList mocks base method.
func (m *MockNonCommittableStateDB) IsSlotInAccessList(arg0 common.Address, arg1 common.Key) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSlotInAccessList", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IsSlotInAccessList indicates an expected call of IsSlotInAccessList.
func (mr *MockNonCommittableStateDBMockRecorder) IsSlotInAccessList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSlotInAccessList", reflect.TypeOf((*MockNonCommittableStateDB)(nil).IsSlotInAccessList), arg0, arg1)
}

// Release mocks base method.
func (m *MockNonCommittableStateDB) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockNonCommittableStateDBMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockNonCommittableStateDB)(nil).Release))
}

// RevertToSnapshot mocks base method.
func (m *MockNonCommittableStateDB) RevertToSnapshot(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevertToSnapshot", arg0)
}

// RevertToSnapshot indicates an expected call of RevertToSnapshot.
func (mr *MockNonCommittableStateDBMockRecorder) RevertToSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertToSnapshot", reflect.TypeOf((*MockNonCommittableStateDB)(nil).RevertToSnapshot), arg0)
}

// SetCode mocks base method.
func (m *MockNonCommittableStateDB) SetCode(arg0 common.Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockNonCommittableStateDBMockRecorder) SetCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockNonCommittableStateDB)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockNonCommittableStateDB) SetNonce(arg0 common.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockNonCommittableStateDBMockRecorder) SetNonce(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockNonCommittableStateDB)(nil).SetNonce), arg0, arg1)
}

// SetState mocks base method.
func (m *MockNonCommittableStateDB) SetState(arg0 common.Address, arg1 common.Key, arg2 common.Value) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0, arg1, arg2)
}

// SetState indicates an expected call of SetState.
func (mr *MockNonCommittableStateDBMockRecorder) SetState(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockNonCommittableStateDB)(nil).SetState), arg0, arg1, arg2)
}

// Snapshot mocks base method.
func (m *MockNonCommittableStateDB) Snapshot() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(int)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockNonCommittableStateDBMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockNonCommittableStateDB)(nil).Snapshot))
}

// SubBalance mocks base method.
func (m *MockNonCommittableStateDB) SubBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubBalance", arg0, arg1)
}

// SubBalance indicates an expected call of SubBalance.
func (mr *MockNonCommittableStateDBMockRecorder) SubBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubBalance", reflect.TypeOf((*MockNonCommittableStateDB)(nil).SubBalance), arg0, arg1)
}

// SubRefund mocks base method.
func (m *MockNonCommittableStateDB) SubRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubRefund", arg0)
}

// SubRefund indicates an expected call of SubRefund.
func (mr *MockNonCommittableStateDBMockRecorder) SubRefund(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubRefund", reflect.TypeOf((*MockNonCommittableStateDB)(nil).SubRefund), arg0)
}

// Suicide mocks base method.
func (m *MockNonCommittableStateDB) Suicide(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suicide", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Suicide indicates an expected call of Suicide.
func (mr *MockNonCommittableStateDBMockRecorder) Suicide(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suicide", reflect.TypeOf((*MockNonCommittableStateDB)(nil).Suicide), arg0)
}

// MockBulkLoad is a mock of BulkLoad interface.
type MockBulkLoad struct {
	ctrl     *gomock.Controller
	recorder *MockBulkLoadMockRecorder
}

// MockBulkLoadMockRecorder is the mock recorder for MockBulkLoad.
type MockBulkLoadMockRecorder struct {
	mock *MockBulkLoad
}

// NewMockBulkLoad creates a new mock instance.
func NewMockBulkLoad(ctrl *gomock.Controller) *MockBulkLoad {
	mock := &MockBulkLoad{ctrl: ctrl}
	mock.recorder = &MockBulkLoadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBulkLoad) EXPECT() *MockBulkLoadMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBulkLoad) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBulkLoadMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBulkLoad)(nil).Close))
}

// CreateAccount mocks base method.
func (m *MockBulkLoad) CreateAccount(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAccount", arg0)
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockBulkLoadMockRecorder) CreateAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockBulkLoad)(nil).CreateAccount), arg0)
}

// SetBalance mocks base method.
func (m *MockBulkLoad) SetBalance(arg0 common.Address, arg1 *big.Int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBalance", arg0, arg1)
}

// SetBalance indicates an expected call of SetBalance.
func (mr *MockBulkLoadMockRecorder) SetBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockBulkLoad)(nil).SetBalance), arg0, arg1)
}

// SetCode mocks base method.
func (m *MockBulkLoad) SetCode(arg0 common.Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockBulkLoadMockRecorder) SetCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockBulkLoad)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockBulkLoad) SetNonce(arg0 common.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockBulkLoadMockRecorder) SetNonce(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockBulkLoad)(nil).SetNonce), arg0, arg1)
}

// SetState mocks base method.
func (m *MockBulkLoad) SetState(arg0 common.Address, arg1 common.Key, arg2 common.Value) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0, arg1, arg2)
}

// SetState indicates an expected call of SetState.
func (mr *MockBulkLoadMockRecorder) SetState(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockBulkLoad)(nil).SetState), arg0, arg1, arg2)
}
