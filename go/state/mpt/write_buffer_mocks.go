// Code generated by MockGen. DO NOT EDIT.
// Source: flush_buffer.go

// Package mpt is a generated GoMock package.
package mpt

import (
	reflect "reflect"

	shared "github.com/Fantom-foundation/Carmen/go/state/mpt/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockFlushBuffer is a mock of FlushBuffer interface.
type MockFlushBuffer struct {
	ctrl     *gomock.Controller
	recorder *MockFlushBufferMockRecorder
}

// MockFlushBufferMockRecorder is the mock recorder for MockFlushBuffer.
type MockFlushBufferMockRecorder struct {
	mock *MockFlushBuffer
}

// NewMockFlushBuffer creates a new mock instance.
func NewMockFlushBuffer(ctrl *gomock.Controller) *MockFlushBuffer {
	mock := &MockFlushBuffer{ctrl: ctrl}
	mock.recorder = &MockFlushBufferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlushBuffer) EXPECT() *MockFlushBufferMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockFlushBuffer) Add(arg0 NodeId, arg1 *shared.Shared[Node]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0, arg1)
}

// Add indicates an expected call of Add.
func (mr *MockFlushBufferMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockFlushBuffer)(nil).Add), arg0, arg1)
}

// Cancel mocks base method.
func (m *MockFlushBuffer) Cancel(arg0 NodeId) (*shared.Shared[Node], bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", arg0)
	ret0, _ := ret[0].(*shared.Shared[Node])
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockFlushBufferMockRecorder) Cancel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockFlushBuffer)(nil).Cancel), arg0)
}

// Flush mocks base method.
func (m *MockFlushBuffer) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockFlushBufferMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockFlushBuffer)(nil).Flush))
}

// MockNodeSink is a mock of NodeSink interface.
type MockNodeSink struct {
	ctrl     *gomock.Controller
	recorder *MockNodeSinkMockRecorder
}

// MockNodeSinkMockRecorder is the mock recorder for MockNodeSink.
type MockNodeSinkMockRecorder struct {
	mock *MockNodeSink
}

// NewMockNodeSink creates a new mock instance.
func NewMockNodeSink(ctrl *gomock.Controller) *MockNodeSink {
	mock := &MockNodeSink{ctrl: ctrl}
	mock.recorder = &MockNodeSinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeSink) EXPECT() *MockNodeSinkMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockNodeSink) Write(arg0 NodeId, arg1 shared.ReadHandle[Node]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockNodeSinkMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockNodeSink)(nil).Write), arg0, arg1)
}
