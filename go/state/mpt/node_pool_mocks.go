// Code generated by MockGen. DO NOT EDIT.
// Source: node_pool.go

// Package mpt is a generated GoMock package.
package mpt

import (
	reflect "reflect"

	shared "github.com/Fantom-foundation/Carmen/go/state/mpt/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockNodePoolSource is a mock of NodePoolSource interface.
type MockNodePoolSource struct {
	ctrl     *gomock.Controller
	recorder *MockNodePoolSourceMockRecorder
}

// MockNodePoolSourceMockRecorder is the mock recorder for MockNodePoolSource.
type MockNodePoolSourceMockRecorder struct {
	mock *MockNodePoolSource
}

// NewMockNodePoolSource creates a new mock instance.
func NewMockNodePoolSource(ctrl *gomock.Controller) *MockNodePoolSource {
	mock := &MockNodePoolSource{ctrl: ctrl}
	mock.recorder = &MockNodePoolSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodePoolSource) EXPECT() *MockNodePoolSourceMockRecorder {
	return m.recorder
}

// getSharedNode mocks base method.
func (m *MockNodePoolSource) getSharedNode(arg0 NodeId) (*shared.Shared[Node], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getSharedNode", arg0)
	ret0, _ := ret[0].(*shared.Shared[Node])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getSharedNode indicates an expected call of getSharedNode.
func (mr *MockNodePoolSourceMockRecorder) getSharedNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSharedNode", reflect.TypeOf((*MockNodePoolSource)(nil).getSharedNode), arg0)
}

// MockNodePool is a mock of NodePool interface.
type MockNodePool struct {
	ctrl     *gomock.Controller
	recorder *MockNodePoolMockRecorder
}

// MockNodePoolMockRecorder is the mock recorder for MockNodePool.
type MockNodePoolMockRecorder struct {
	mock *MockNodePool
}

// NewMockNodePool creates a new mock instance.
func NewMockNodePool(ctrl *gomock.Controller) *MockNodePool {
	mock := &MockNodePool{ctrl: ctrl}
	mock.recorder = &MockNodePoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodePool) EXPECT() *MockNodePoolMockRecorder {
	return m.recorder
}

// Size mocks base method.
func (m *MockNodePool) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockNodePoolMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockNodePool)(nil).Size))
}

// get mocks base method.
func (m *MockNodePool) get(arg0 NodeId) lockedOwner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "get", arg0)
	ret0, _ := ret[0].(lockedOwner)
	return ret0
}

// get indicates an expected call of get.
func (mr *MockNodePoolMockRecorder) get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "get", reflect.TypeOf((*MockNodePool)(nil).get), arg0)
}

// load mocks base method.
func (m *MockNodePool) load(arg0 NodeId) (*shared.Shared[Node], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "load", arg0)
	ret0, _ := ret[0].(*shared.Shared[Node])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// load indicates an expected call of load.
func (mr *MockNodePoolMockRecorder) load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "load", reflect.TypeOf((*MockNodePool)(nil).load), arg0)
}

// touch mocks base method.
func (m *MockNodePool) touch(arg0 lockedOwner) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "touch", arg0)
}

// touch indicates an expected call of touch.
func (mr *MockNodePoolMockRecorder) touch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "touch", reflect.TypeOf((*MockNodePool)(nil).touch), arg0)
}
