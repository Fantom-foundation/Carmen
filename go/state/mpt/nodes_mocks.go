// Code generated by MockGen. DO NOT EDIT.
// Source: nodes.go

// Package mpt is a generated GoMock package.
package mpt

import (
	reflect "reflect"

	common "github.com/Fantom-foundation/Carmen/go/common"
	shared "github.com/Fantom-foundation/Carmen/go/state/mpt/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockNode) Check(context NodeContext, source NodeSource, thisRef NodeReference, path []Nibble) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", context, source, thisRef, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockNodeMockRecorder) Check(context, source, thisRef, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockNode)(nil).Check), context, source, thisRef, path)
}

// ClearStorage mocks base method.
func (m *MockNode) ClearStorage(context NodeContext, manager NodeManager, thisRef NodeReference, this shared.WriteHandle[Node], address common.Address, path []Nibble) (NodeReference, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearStorage", context, manager, thisRef, this, address, path)
	ret0, _ := ret[0].(NodeReference)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ClearStorage indicates an expected call of ClearStorage.
func (mr *MockNodeMockRecorder) ClearStorage(context, manager, thisRef, this, address, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearStorage", reflect.TypeOf((*MockNode)(nil).ClearStorage), context, manager, thisRef, this, address, path)
}

// Dump mocks base method.
func (m *MockNode) Dump(context NodeContext, source NodeSource, thisRef NodeReference, indent string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dump", context, source, thisRef, indent)
}

// Dump indicates an expected call of Dump.
func (mr *MockNodeMockRecorder) Dump(context, source, thisRef, indent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockNode)(nil).Dump), context, source, thisRef, indent)
}

// Freeze mocks base method.
func (m *MockNode) Freeze(context NodeContext, manager NodeManager, this shared.WriteHandle[Node]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Freeze", context, manager, this)
	ret0, _ := ret[0].(error)
	return ret0
}

// Freeze indicates an expected call of Freeze.
func (mr *MockNodeMockRecorder) Freeze(context, manager, this interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Freeze", reflect.TypeOf((*MockNode)(nil).Freeze), context, manager, this)
}

// GetAccount mocks base method.
func (m *MockNode) GetAccount(context NodeContext, source NodeSource, address common.Address, path []Nibble) (AccountInfo, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", context, source, address, path)
	ret0, _ := ret[0].(AccountInfo)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockNodeMockRecorder) GetAccount(context, source, address, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockNode)(nil).GetAccount), context, source, address, path)
}

// GetHash mocks base method.
func (m *MockNode) GetHash() (common.Hash, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetHash indicates an expected call of GetHash.
func (mr *MockNodeMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockNode)(nil).GetHash))
}

// GetSlot mocks base method.
func (m *MockNode) GetSlot(context NodeContext, source NodeSource, address common.Address, path []Nibble, key common.Key) (common.Value, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlot", context, source, address, path, key)
	ret0, _ := ret[0].(common.Value)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSlot indicates an expected call of GetSlot.
func (mr *MockNodeMockRecorder) GetSlot(context, source, address, path, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlot", reflect.TypeOf((*MockNode)(nil).GetSlot), context, source, address, path, key)
}

// GetValue mocks base method.
func (m *MockNode) GetValue(context NodeContext, source NodeSource, key common.Key, path []Nibble) (common.Value, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", context, source, key, path)
	ret0, _ := ret[0].(common.Value)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetValue indicates an expected call of GetValue.
func (mr *MockNodeMockRecorder) GetValue(context, source, key, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockNode)(nil).GetValue), context, source, key, path)
}

// IsFrozen mocks base method.
func (m *MockNode) IsFrozen() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFrozen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFrozen indicates an expected call of IsFrozen.
func (mr *MockNodeMockRecorder) IsFrozen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFrozen", reflect.TypeOf((*MockNode)(nil).IsFrozen))
}

// MarkFrozen mocks base method.
func (m *MockNode) MarkFrozen() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkFrozen")
}

// MarkFrozen indicates an expected call of MarkFrozen.
func (mr *MockNodeMockRecorder) MarkFrozen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFrozen", reflect.TypeOf((*MockNode)(nil).MarkFrozen))
}

// Release mocks base method.
func (m *MockNode) Release(context NodeContext, manager NodeManager, thisRef NodeReference, this shared.WriteHandle[Node]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", context, manager, thisRef, this)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockNodeMockRecorder) Release(context, manager, thisRef, this interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockNode)(nil).Release), context, manager, thisRef, this)
}

// SetAccount mocks base method.
func (m *MockNode) SetAccount(context NodeContext, manager NodeManager, thisRef NodeReference, this shared.WriteHandle[Node], address common.Address, path []Nibble, info AccountInfo) (NodeReference, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccount", context, manager, thisRef, this, address, path, info)
	ret0, _ := ret[0].(NodeReference)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetAccount indicates an expected call of SetAccount.
func (mr *MockNodeMockRecorder) SetAccount(context, manager, thisRef, this, address, path, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccount", reflect.TypeOf((*MockNode)(nil).SetAccount), context, manager, thisRef, this, address, path, info)
}

// SetHash mocks base method.
func (m *MockNode) SetHash(arg0 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHash", arg0)
}

// SetHash indicates an expected call of SetHash.
func (mr *MockNodeMockRecorder) SetHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHash", reflect.TypeOf((*MockNode)(nil).SetHash), arg0)
}

// SetSlot mocks base method.
func (m *MockNode) SetSlot(context NodeContext, manager NodeManager, thisRef NodeReference, this shared.WriteHandle[Node], address common.Address, path []Nibble, key common.Key, value common.Value) (NodeReference, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSlot", context, manager, thisRef, this, address, path, key, value)
	ret0, _ := ret[0].(NodeReference)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetSlot indicates an expected call of SetSlot.
func (mr *MockNodeMockRecorder) SetSlot(context, manager, thisRef, this, address, path, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSlot", reflect.TypeOf((*MockNode)(nil).SetSlot), context, manager, thisRef, this, address, path, key, value)
}

// SetValue mocks base method.
func (m *MockNode) SetValue(context NodeContext, manager NodeManager, thisRef NodeReference, this shared.WriteHandle[Node], key common.Key, path []Nibble, value common.Value) (NodeReference, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValue", context, manager, thisRef, this, key, path, value)
	ret0, _ := ret[0].(NodeReference)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetValue indicates an expected call of SetValue.
func (mr *MockNodeMockRecorder) SetValue(context, manager, thisRef, this, key, path, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockNode)(nil).SetValue), context, manager, thisRef, this, key, path, value)
}

// Visit mocks base method.
func (m *MockNode) Visit(context NodeContext, source NodeSource, thisRef NodeReference, depth int, visitor NodeVisitor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Visit", context, source, thisRef, depth, visitor)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Visit indicates an expected call of Visit.
func (mr *MockNodeMockRecorder) Visit(context, source, thisRef, depth, visitor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Visit", reflect.TypeOf((*MockNode)(nil).Visit), context, source, thisRef, depth, visitor)
}

// MockNodeContext is a mock of NodeContext interface.
type MockNodeContext struct {
	ctrl     *gomock.Controller
	recorder *MockNodeContextMockRecorder
}

// MockNodeContextMockRecorder is the mock recorder for MockNodeContext.
type MockNodeContextMockRecorder struct {
	mock *MockNodeContext
}

// NewMockNodeContext creates a new mock instance.
func NewMockNodeContext(ctrl *gomock.Controller) *MockNodeContext {
	mock := &MockNodeContext{ctrl: ctrl}
	mock.recorder = &MockNodeContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeContext) EXPECT() *MockNodeContextMockRecorder {
	return m.recorder
}

// getConfig mocks base method.
func (m *MockNodeContext) getConfig() MptConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getConfig")
	ret0, _ := ret[0].(MptConfig)
	return ret0
}

// getConfig indicates an expected call of getConfig.
func (mr *MockNodeContextMockRecorder) getConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getConfig", reflect.TypeOf((*MockNodeContext)(nil).getConfig))
}

// getHashFor mocks base method.
func (m *MockNodeContext) getHashFor(arg0 NodeReference) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getHashFor", arg0)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getHashFor indicates an expected call of getHashFor.
func (mr *MockNodeContextMockRecorder) getHashFor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getHashFor", reflect.TypeOf((*MockNodeContext)(nil).getHashFor), arg0)
}

// hashAddress mocks base method.
func (m *MockNodeContext) hashAddress(address common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hashAddress", address)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// hashAddress indicates an expected call of hashAddress.
func (mr *MockNodeContextMockRecorder) hashAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hashAddress", reflect.TypeOf((*MockNodeContext)(nil).hashAddress), address)
}

// hashKey mocks base method.
func (m *MockNodeContext) hashKey(arg0 common.Key) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hashKey", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// hashKey indicates an expected call of hashKey.
func (mr *MockNodeContextMockRecorder) hashKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hashKey", reflect.TypeOf((*MockNodeContext)(nil).hashKey), arg0)
}

// MockleafNode is a mock of leafNode interface.
type MockleafNode struct {
	ctrl     *gomock.Controller
	recorder *MockleafNodeMockRecorder
}

// MockleafNodeMockRecorder is the mock recorder for MockleafNode.
type MockleafNodeMockRecorder struct {
	mock *MockleafNode
}

// NewMockleafNode creates a new mock instance.
func NewMockleafNode(ctrl *gomock.Controller) *MockleafNode {
	mock := &MockleafNode{ctrl: ctrl}
	mock.recorder = &MockleafNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockleafNode) EXPECT() *MockleafNodeMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockleafNode) Check(context NodeContext, source NodeSource, thisRef NodeReference, path []Nibble) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", context, source, thisRef, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockleafNodeMockRecorder) Check(context, source, thisRef, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockleafNode)(nil).Check), context, source, thisRef, path)
}

// ClearStorage mocks base method.
func (m *MockleafNode) ClearStorage(context NodeContext, manager NodeManager, thisRef NodeReference, this shared.WriteHandle[Node], address common.Address, path []Nibble) (NodeReference, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearStorage", context, manager, thisRef, this, address, path)
	ret0, _ := ret[0].(NodeReference)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ClearStorage indicates an expected call of ClearStorage.
func (mr *MockleafNodeMockRecorder) ClearStorage(context, manager, thisRef, this, address, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearStorage", reflect.TypeOf((*MockleafNode)(nil).ClearStorage), context, manager, thisRef, this, address, path)
}

// Dump mocks base method.
func (m *MockleafNode) Dump(context NodeContext, source NodeSource, thisRef NodeReference, indent string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dump", context, source, thisRef, indent)
}

// Dump indicates an expected call of Dump.
func (mr *MockleafNodeMockRecorder) Dump(context, source, thisRef, indent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockleafNode)(nil).Dump), context, source, thisRef, indent)
}

// Freeze mocks base method.
func (m *MockleafNode) Freeze(context NodeContext, manager NodeManager, this shared.WriteHandle[Node]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Freeze", context, manager, this)
	ret0, _ := ret[0].(error)
	return ret0
}

// Freeze indicates an expected call of Freeze.
func (mr *MockleafNodeMockRecorder) Freeze(context, manager, this interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Freeze", reflect.TypeOf((*MockleafNode)(nil).Freeze), context, manager, this)
}

// GetAccount mocks base method.
func (m *MockleafNode) GetAccount(context NodeContext, source NodeSource, address common.Address, path []Nibble) (AccountInfo, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", context, source, address, path)
	ret0, _ := ret[0].(AccountInfo)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockleafNodeMockRecorder) GetAccount(context, source, address, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockleafNode)(nil).GetAccount), context, source, address, path)
}

// GetHash mocks base method.
func (m *MockleafNode) GetHash() (common.Hash, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetHash indicates an expected call of GetHash.
func (mr *MockleafNodeMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockleafNode)(nil).GetHash))
}

// GetSlot mocks base method.
func (m *MockleafNode) GetSlot(context NodeContext, source NodeSource, address common.Address, path []Nibble, key common.Key) (common.Value, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlot", context, source, address, path, key)
	ret0, _ := ret[0].(common.Value)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSlot indicates an expected call of GetSlot.
func (mr *MockleafNodeMockRecorder) GetSlot(context, source, address, path, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlot", reflect.TypeOf((*MockleafNode)(nil).GetSlot), context, source, address, path, key)
}

// GetValue mocks base method.
func (m *MockleafNode) GetValue(context NodeContext, source NodeSource, key common.Key, path []Nibble) (common.Value, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", context, source, key, path)
	ret0, _ := ret[0].(common.Value)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetValue indicates an expected call of GetValue.
func (mr *MockleafNodeMockRecorder) GetValue(context, source, key, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockleafNode)(nil).GetValue), context, source, key, path)
}

// IsFrozen mocks base method.
func (m *MockleafNode) IsFrozen() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFrozen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFrozen indicates an expected call of IsFrozen.
func (mr *MockleafNodeMockRecorder) IsFrozen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFrozen", reflect.TypeOf((*MockleafNode)(nil).IsFrozen))
}

// MarkFrozen mocks base method.
func (m *MockleafNode) MarkFrozen() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkFrozen")
}

// MarkFrozen indicates an expected call of MarkFrozen.
func (mr *MockleafNodeMockRecorder) MarkFrozen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFrozen", reflect.TypeOf((*MockleafNode)(nil).MarkFrozen))
}

// Release mocks base method.
func (m *MockleafNode) Release(context NodeContext, manager NodeManager, thisRef NodeReference, this shared.WriteHandle[Node]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", context, manager, thisRef, this)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockleafNodeMockRecorder) Release(context, manager, thisRef, this interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockleafNode)(nil).Release), context, manager, thisRef, this)
}

// SetAccount mocks base method.
func (m *MockleafNode) SetAccount(context NodeContext, manager NodeManager, thisRef NodeReference, this shared.WriteHandle[Node], address common.Address, path []Nibble, info AccountInfo) (NodeReference, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccount", context, manager, thisRef, this, address, path, info)
	ret0, _ := ret[0].(NodeReference)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetAccount indicates an expected call of SetAccount.
func (mr *MockleafNodeMockRecorder) SetAccount(context, manager, thisRef, this, address, path, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccount", reflect.TypeOf((*MockleafNode)(nil).SetAccount), context, manager, thisRef, this, address, path, info)
}

// SetHash mocks base method.
func (m *MockleafNode) SetHash(arg0 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHash", arg0)
}

// SetHash indicates an expected call of SetHash.
func (mr *MockleafNodeMockRecorder) SetHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHash", reflect.TypeOf((*MockleafNode)(nil).SetHash), arg0)
}

// SetSlot mocks base method.
func (m *MockleafNode) SetSlot(context NodeContext, manager NodeManager, thisRef NodeReference, this shared.WriteHandle[Node], address common.Address, path []Nibble, key common.Key, value common.Value) (NodeReference, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSlot", context, manager, thisRef, this, address, path, key, value)
	ret0, _ := ret[0].(NodeReference)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetSlot indicates an expected call of SetSlot.
func (mr *MockleafNodeMockRecorder) SetSlot(context, manager, thisRef, this, address, path, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSlot", reflect.TypeOf((*MockleafNode)(nil).SetSlot), context, manager, thisRef, this, address, path, key, value)
}

// SetValue mocks base method.
func (m *MockleafNode) SetValue(context NodeContext, manager NodeManager, thisRef NodeReference, this shared.WriteHandle[Node], key common.Key, path []Nibble, value common.Value) (NodeReference, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValue", context, manager, thisRef, this, key, path, value)
	ret0, _ := ret[0].(NodeReference)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetValue indicates an expected call of SetValue.
func (mr *MockleafNodeMockRecorder) SetValue(context, manager, thisRef, this, key, path, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockleafNode)(nil).SetValue), context, manager, thisRef, this, key, path, value)
}

// Visit mocks base method.
func (m *MockleafNode) Visit(context NodeContext, source NodeSource, thisRef NodeReference, depth int, visitor NodeVisitor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Visit", context, source, thisRef, depth, visitor)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Visit indicates an expected call of Visit.
func (mr *MockleafNodeMockRecorder) Visit(context, source, thisRef, depth, visitor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Visit", reflect.TypeOf((*MockleafNode)(nil).Visit), context, source, thisRef, depth, visitor)
}

// setPathLength mocks base method.
func (m *MockleafNode) setPathLength(context NodeContext, manager NodeManager, thisRef NodeReference, this shared.WriteHandle[Node], length byte) (NodeReference, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setPathLength", context, manager, thisRef, this, length)
	ret0, _ := ret[0].(NodeReference)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// setPathLength indicates an expected call of setPathLength.
func (mr *MockleafNodeMockRecorder) setPathLength(context, manager, thisRef, this, length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setPathLength", reflect.TypeOf((*MockleafNode)(nil).setPathLength), context, manager, thisRef, this, length)
}
