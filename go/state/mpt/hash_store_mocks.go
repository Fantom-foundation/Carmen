// Code generated by MockGen. DO NOT EDIT.
// Source: hash_store.go

// Package mpt is a generated GoMock package.
package mpt

import (
	reflect "reflect"

	common "github.com/Fantom-foundation/Carmen/go/common"
	gomock "go.uber.org/mock/gomock"
)

// MockHashStore is a mock of HashStore interface.
type MockHashStore struct {
	ctrl     *gomock.Controller
	recorder *MockHashStoreMockRecorder
}

// MockHashStoreMockRecorder is the mock recorder for MockHashStore.
type MockHashStoreMockRecorder struct {
	mock *MockHashStore
}

// NewMockHashStore creates a new mock instance.
func NewMockHashStore(ctrl *gomock.Controller) *MockHashStore {
	mock := &MockHashStore{ctrl: ctrl}
	mock.recorder = &MockHashStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashStore) EXPECT() *MockHashStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockHashStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockHashStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockHashStore)(nil).Close))
}

// Flush mocks base method.
func (m *MockHashStore) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockHashStoreMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockHashStore)(nil).Flush))
}

// Get mocks base method.
func (m *MockHashStore) Get(arg0 NodeId) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHashStoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHashStore)(nil).Get), arg0)
}

// GetMemoryFootprint mocks base method.
func (m *MockHashStore) GetMemoryFootprint() *common.MemoryFootprint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryFootprint")
	ret0, _ := ret[0].(*common.MemoryFootprint)
	return ret0
}

// GetMemoryFootprint indicates an expected call of GetMemoryFootprint.
func (mr *MockHashStoreMockRecorder) GetMemoryFootprint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryFootprint", reflect.TypeOf((*MockHashStore)(nil).GetMemoryFootprint))
}

// Set mocks base method.
func (m *MockHashStore) Set(arg0 NodeId, arg1 common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockHashStoreMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockHashStore)(nil).Set), arg0, arg1)
}
