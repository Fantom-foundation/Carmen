// Code generated by MockGen. DO NOT EDIT.
// Source: hasher.go

// Package mpt is a generated GoMock package.
package mpt

import (
	reflect "reflect"

	common "github.com/Fantom-foundation/Carmen/go/common"
	gomock "go.uber.org/mock/gomock"
)

// Mockhasher is a mock of hasher interface.
type Mockhasher struct {
	ctrl     *gomock.Controller
	recorder *MockhasherMockRecorder
}

// MockhasherMockRecorder is the mock recorder for Mockhasher.
type MockhasherMockRecorder struct {
	mock *Mockhasher
}

// NewMockhasher creates a new mock instance.
func NewMockhasher(ctrl *gomock.Controller) *Mockhasher {
	mock := &Mockhasher{ctrl: ctrl}
	mock.recorder = &MockhasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockhasher) EXPECT() *MockhasherMockRecorder {
	return m.recorder
}

// GetMemoryFootprint mocks base method.
func (m *Mockhasher) GetMemoryFootprint() *common.MemoryFootprint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryFootprint")
	ret0, _ := ret[0].(*common.MemoryFootprint)
	return ret0
}

// GetMemoryFootprint indicates an expected call of GetMemoryFootprint.
func (mr *MockhasherMockRecorder) GetMemoryFootprint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryFootprint", reflect.TypeOf((*Mockhasher)(nil).GetMemoryFootprint))
}

// close mocks base method.
func (m *Mockhasher) close(arg0 NodeSource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// close indicates an expected call of close.
func (mr *MockhasherMockRecorder) close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "close", reflect.TypeOf((*Mockhasher)(nil).close), arg0)
}

// flush mocks base method.
func (m *Mockhasher) flush(arg0 NodeSource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "flush", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// flush indicates an expected call of flush.
func (mr *MockhasherMockRecorder) flush(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "flush", reflect.TypeOf((*Mockhasher)(nil).flush), arg0)
}

// forget mocks base method.
func (m *Mockhasher) forget(arg0 NodeId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "forget", arg0)
}

// forget indicates an expected call of forget.
func (mr *MockhasherMockRecorder) forget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "forget", reflect.TypeOf((*Mockhasher)(nil).forget), arg0)
}

// getHash mocks base method.
func (m *Mockhasher) getHash(arg0 NodeId, arg1 NodeSource) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getHash", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getHash indicates an expected call of getHash.
func (mr *MockhasherMockRecorder) getHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getHash", reflect.TypeOf((*Mockhasher)(nil).getHash), arg0, arg1)
}

// update mocks base method.
func (m *Mockhasher) update(arg0 NodeId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "update", arg0)
}

// update indicates an expected call of update.
func (mr *MockhasherMockRecorder) update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "update", reflect.TypeOf((*Mockhasher)(nil).update), arg0)
}
