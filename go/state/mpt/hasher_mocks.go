// Code generated by MockGen. DO NOT EDIT.
// Source: hasher.go

// Package mpt is a generated GoMock package.
package mpt

import (
	reflect "reflect"

	common "github.com/Fantom-foundation/Carmen/go/common"
	gomock "go.uber.org/mock/gomock"
)

// Mockhasher is a mock of hasher interface.
type Mockhasher struct {
	ctrl     *gomock.Controller
	recorder *MockhasherMockRecorder
}

// MockhasherMockRecorder is the mock recorder for Mockhasher.
type MockhasherMockRecorder struct {
	mock *Mockhasher
}

// NewMockhasher creates a new mock instance.
func NewMockhasher(ctrl *gomock.Controller) *Mockhasher {
	mock := &Mockhasher{ctrl: ctrl}
	mock.recorder = &MockhasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockhasher) EXPECT() *MockhasherMockRecorder {
	return m.recorder
}

// getHash mocks base method.
func (m *Mockhasher) getHash(arg0 NodeId, arg1 NodeSource) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getHash", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getHash indicates an expected call of getHash.
func (mr *MockhasherMockRecorder) getHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getHash", reflect.TypeOf((*Mockhasher)(nil).getHash), arg0, arg1)
}

// updateHashes mocks base method.
func (m *Mockhasher) updateHashes(root NodeId, nodes NodeManager) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateHashes", root, nodes)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// updateHashes indicates an expected call of updateHashes.
func (mr *MockhasherMockRecorder) updateHashes(root, nodes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateHashes", reflect.TypeOf((*Mockhasher)(nil).updateHashes), root, nodes)
}

// MockkeccakHasher is a mock of keccakHasher interface.
type MockkeccakHasher struct {
	ctrl     *gomock.Controller
	recorder *MockkeccakHasherMockRecorder
}

// MockkeccakHasherMockRecorder is the mock recorder for MockkeccakHasher.
type MockkeccakHasherMockRecorder struct {
	mock *MockkeccakHasher
}

// NewMockkeccakHasher creates a new mock instance.
func NewMockkeccakHasher(ctrl *gomock.Controller) *MockkeccakHasher {
	mock := &MockkeccakHasher{ctrl: ctrl}
	mock.recorder = &MockkeccakHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockkeccakHasher) EXPECT() *MockkeccakHasherMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockkeccakHasher) Read(out []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", out)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockkeccakHasherMockRecorder) Read(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockkeccakHasher)(nil).Read), out)
}

// Reset mocks base method.
func (m *MockkeccakHasher) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockkeccakHasherMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockkeccakHasher)(nil).Reset))
}

// Write mocks base method.
func (m *MockkeccakHasher) Write(in []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", in)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockkeccakHasherMockRecorder) Write(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockkeccakHasher)(nil).Write), in)
}
