// Code generated by MockGen. DO NOT EDIT.
// Source: node_manager.go

// Package mpt is a generated GoMock package.
package mpt

import (
	reflect "reflect"

	shared "github.com/Fantom-foundation/Carmen/go/state/mpt/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockNodeSource is a mock of NodeSource interface.
type MockNodeSource struct {
	ctrl     *gomock.Controller
	recorder *MockNodeSourceMockRecorder
}

// MockNodeSourceMockRecorder is the mock recorder for MockNodeSource.
type MockNodeSourceMockRecorder struct {
	mock *MockNodeSource
}

// NewMockNodeSource creates a new mock instance.
func NewMockNodeSource(ctrl *gomock.Controller) *MockNodeSource {
	mock := &MockNodeSource{ctrl: ctrl}
	mock.recorder = &MockNodeSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeSource) EXPECT() *MockNodeSourceMockRecorder {
	return m.recorder
}

// GetReadAccess mocks base method.
func (m *MockNodeSource) GetReadAccess(arg0 *NodeReference) (shared.ReadHandle[Node], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadAccess", arg0)
	ret0, _ := ret[0].(shared.ReadHandle[Node])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadAccess indicates an expected call of GetReadAccess.
func (mr *MockNodeSourceMockRecorder) GetReadAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadAccess", reflect.TypeOf((*MockNodeSource)(nil).GetReadAccess), arg0)
}

// Touch mocks base method.
func (m *MockNodeSource) Touch(arg0 *NodeReference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Touch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Touch indicates an expected call of Touch.
func (mr *MockNodeSourceMockRecorder) Touch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Touch", reflect.TypeOf((*MockNodeSource)(nil).Touch), arg0)
}

// getOwner mocks base method.
func (m *MockNodeSource) getOwner(arg0 NodeId) (*nodeOwner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getOwner", arg0)
	ret0, _ := ret[0].(*nodeOwner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getOwner indicates an expected call of getOwner.
func (mr *MockNodeSourceMockRecorder) getOwner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getOwner", reflect.TypeOf((*MockNodeSource)(nil).getOwner), arg0)
}

// MockNodeManager is a mock of NodeManager interface.
type MockNodeManager struct {
	ctrl     *gomock.Controller
	recorder *MockNodeManagerMockRecorder
}

// MockNodeManagerMockRecorder is the mock recorder for MockNodeManager.
type MockNodeManagerMockRecorder struct {
	mock *MockNodeManager
}

// NewMockNodeManager creates a new mock instance.
func NewMockNodeManager(ctrl *gomock.Controller) *MockNodeManager {
	mock := &MockNodeManager{ctrl: ctrl}
	mock.recorder = &MockNodeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeManager) EXPECT() *MockNodeManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockNodeManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockNodeManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNodeManager)(nil).Close))
}

// CreateAccount mocks base method.
func (m *MockNodeManager) CreateAccount() (NodeReference, shared.WriteHandle[Node], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount")
	ret0, _ := ret[0].(NodeReference)
	ret1, _ := ret[1].(shared.WriteHandle[Node])
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockNodeManagerMockRecorder) CreateAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockNodeManager)(nil).CreateAccount))
}

// CreateBranch mocks base method.
func (m *MockNodeManager) CreateBranch() (NodeReference, shared.WriteHandle[Node], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch")
	ret0, _ := ret[0].(NodeReference)
	ret1, _ := ret[1].(shared.WriteHandle[Node])
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockNodeManagerMockRecorder) CreateBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockNodeManager)(nil).CreateBranch))
}

// CreateExtension mocks base method.
func (m *MockNodeManager) CreateExtension() (NodeReference, shared.WriteHandle[Node], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExtension")
	ret0, _ := ret[0].(NodeReference)
	ret1, _ := ret[1].(shared.WriteHandle[Node])
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateExtension indicates an expected call of CreateExtension.
func (mr *MockNodeManagerMockRecorder) CreateExtension() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtension", reflect.TypeOf((*MockNodeManager)(nil).CreateExtension))
}

// CreateValue mocks base method.
func (m *MockNodeManager) CreateValue() (NodeReference, shared.WriteHandle[Node], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateValue")
	ret0, _ := ret[0].(NodeReference)
	ret1, _ := ret[1].(shared.WriteHandle[Node])
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateValue indicates an expected call of CreateValue.
func (mr *MockNodeManagerMockRecorder) CreateValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateValue", reflect.TypeOf((*MockNodeManager)(nil).CreateValue))
}

// Flush mocks base method.
func (m *MockNodeManager) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockNodeManagerMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockNodeManager)(nil).Flush))
}

// GetReadAccess mocks base method.
func (m *MockNodeManager) GetReadAccess(arg0 *NodeReference) (shared.ReadHandle[Node], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadAccess", arg0)
	ret0, _ := ret[0].(shared.ReadHandle[Node])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadAccess indicates an expected call of GetReadAccess.
func (mr *MockNodeManagerMockRecorder) GetReadAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadAccess", reflect.TypeOf((*MockNodeManager)(nil).GetReadAccess), arg0)
}

// GetWriteAccess mocks base method.
func (m *MockNodeManager) GetWriteAccess(arg0 *NodeReference) (shared.WriteHandle[Node], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWriteAccess", arg0)
	ret0, _ := ret[0].(shared.WriteHandle[Node])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWriteAccess indicates an expected call of GetWriteAccess.
func (mr *MockNodeManagerMockRecorder) GetWriteAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWriteAccess", reflect.TypeOf((*MockNodeManager)(nil).GetWriteAccess), arg0)
}

// MarkDirty mocks base method.
func (m *MockNodeManager) MarkDirty(arg0 *NodeReference, arg1 shared.WriteHandle[Node]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkDirty", arg0, arg1)
}

// MarkDirty indicates an expected call of MarkDirty.
func (mr *MockNodeManagerMockRecorder) MarkDirty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDirty", reflect.TypeOf((*MockNodeManager)(nil).MarkDirty), arg0, arg1)
}

// Release mocks base method.
func (m *MockNodeManager) Release(arg0 *NodeReference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockNodeManagerMockRecorder) Release(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockNodeManager)(nil).Release), arg0)
}

// Size mocks base method.
func (m *MockNodeManager) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockNodeManagerMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockNodeManager)(nil).Size))
}

// Touch mocks base method.
func (m *MockNodeManager) Touch(arg0 *NodeReference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Touch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Touch indicates an expected call of Touch.
func (mr *MockNodeManagerMockRecorder) Touch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Touch", reflect.TypeOf((*MockNodeManager)(nil).Touch), arg0)
}

// getOwner mocks base method.
func (m *MockNodeManager) getOwner(arg0 NodeId) (*nodeOwner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getOwner", arg0)
	ret0, _ := ret[0].(*nodeOwner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getOwner indicates an expected call of getOwner.
func (mr *MockNodeManagerMockRecorder) getOwner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getOwner", reflect.TypeOf((*MockNodeManager)(nil).getOwner), arg0)
}

// MockNodeStore is a mock of NodeStore interface.
type MockNodeStore struct {
	ctrl     *gomock.Controller
	recorder *MockNodeStoreMockRecorder
}

// MockNodeStoreMockRecorder is the mock recorder for MockNodeStore.
type MockNodeStoreMockRecorder struct {
	mock *MockNodeStore
}

// NewMockNodeStore creates a new mock instance.
func NewMockNodeStore(ctrl *gomock.Controller) *MockNodeStore {
	mock := &MockNodeStore{ctrl: ctrl}
	mock.recorder = &MockNodeStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeStore) EXPECT() *MockNodeStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockNodeStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockNodeStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNodeStore)(nil).Close))
}

// Flush mocks base method.
func (m *MockNodeStore) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockNodeStoreMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockNodeStore)(nil).Flush))
}

// GetFreshAccountId mocks base method.
func (m *MockNodeStore) GetFreshAccountId() (NodeId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreshAccountId")
	ret0, _ := ret[0].(NodeId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreshAccountId indicates an expected call of GetFreshAccountId.
func (mr *MockNodeStoreMockRecorder) GetFreshAccountId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreshAccountId", reflect.TypeOf((*MockNodeStore)(nil).GetFreshAccountId))
}

// GetFreshBranchId mocks base method.
func (m *MockNodeStore) GetFreshBranchId() (NodeId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreshBranchId")
	ret0, _ := ret[0].(NodeId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreshBranchId indicates an expected call of GetFreshBranchId.
func (mr *MockNodeStoreMockRecorder) GetFreshBranchId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreshBranchId", reflect.TypeOf((*MockNodeStore)(nil).GetFreshBranchId))
}

// GetFreshExtensionId mocks base method.
func (m *MockNodeStore) GetFreshExtensionId() (NodeId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreshExtensionId")
	ret0, _ := ret[0].(NodeId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreshExtensionId indicates an expected call of GetFreshExtensionId.
func (mr *MockNodeStoreMockRecorder) GetFreshExtensionId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreshExtensionId", reflect.TypeOf((*MockNodeStore)(nil).GetFreshExtensionId))
}

// GetFreshValueId mocks base method.
func (m *MockNodeStore) GetFreshValueId() (NodeId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreshValueId")
	ret0, _ := ret[0].(NodeId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreshValueId indicates an expected call of GetFreshValueId.
func (mr *MockNodeStoreMockRecorder) GetFreshValueId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreshValueId", reflect.TypeOf((*MockNodeStore)(nil).GetFreshValueId))
}

// Load mocks base method.
func (m *MockNodeStore) Load(arg0 NodeId) (Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockNodeStoreMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockNodeStore)(nil).Load), arg0)
}

// Release mocks base method.
func (m *MockNodeStore) Release(arg0 NodeId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockNodeStoreMockRecorder) Release(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockNodeStore)(nil).Release), arg0)
}

// Store mocks base method.
func (m *MockNodeStore) Store(arg0 NodeId, arg1 Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockNodeStoreMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockNodeStore)(nil).Store), arg0, arg1)
}
