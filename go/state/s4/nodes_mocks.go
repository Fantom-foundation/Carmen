// Code generated by MockGen. DO NOT EDIT.
// Source: nodes.go

// Package s4 is a generated GoMock package.
package s4

import (
	reflect "reflect"

	common "github.com/Fantom-foundation/Carmen/go/common"
	gomock "github.com/golang/mock/gomock"
)

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockNode) Check(source NodeSource, path []Nibble) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", source, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockNodeMockRecorder) Check(source, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockNode)(nil).Check), source, path)
}

// ClearStorage mocks base method.
func (m *MockNode) ClearStorage(manager NodeManager, address *common.Address, path []Nibble) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearStorage", manager, address, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearStorage indicates an expected call of ClearStorage.
func (mr *MockNodeMockRecorder) ClearStorage(manager, address, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearStorage", reflect.TypeOf((*MockNode)(nil).ClearStorage), manager, address, path)
}

// Dump mocks base method.
func (m *MockNode) Dump(source NodeSource, thisId NodeId, indent string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dump", source, thisId, indent)
}

// Dump indicates an expected call of Dump.
func (mr *MockNodeMockRecorder) Dump(source, thisId, indent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockNode)(nil).Dump), source, thisId, indent)
}

// GetAccount mocks base method.
func (m *MockNode) GetAccount(source NodeSource, address *common.Address, path []Nibble) (AccountInfo, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", source, address, path)
	ret0, _ := ret[0].(AccountInfo)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockNodeMockRecorder) GetAccount(source, address, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockNode)(nil).GetAccount), source, address, path)
}

// GetSlot mocks base method.
func (m *MockNode) GetSlot(source NodeSource, address *common.Address, path []Nibble, key *common.Key) (common.Value, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlot", source, address, path, key)
	ret0, _ := ret[0].(common.Value)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSlot indicates an expected call of GetSlot.
func (mr *MockNodeMockRecorder) GetSlot(source, address, path, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlot", reflect.TypeOf((*MockNode)(nil).GetSlot), source, address, path, key)
}

// GetValue mocks base method.
func (m *MockNode) GetValue(source NodeSource, key *common.Key, path []Nibble) (common.Value, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", source, key, path)
	ret0, _ := ret[0].(common.Value)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetValue indicates an expected call of GetValue.
func (mr *MockNodeMockRecorder) GetValue(source, key, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockNode)(nil).GetValue), source, key, path)
}

// Release mocks base method.
func (m *MockNode) Release(manager NodeManager, thisId NodeId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", manager, thisId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockNodeMockRecorder) Release(manager, thisId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockNode)(nil).Release), manager, thisId)
}

// SetAccount mocks base method.
func (m *MockNode) SetAccount(manager NodeManager, thisId NodeId, address *common.Address, path []Nibble, info *AccountInfo) (NodeId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccount", manager, thisId, address, path, info)
	ret0, _ := ret[0].(NodeId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetAccount indicates an expected call of SetAccount.
func (mr *MockNodeMockRecorder) SetAccount(manager, thisId, address, path, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccount", reflect.TypeOf((*MockNode)(nil).SetAccount), manager, thisId, address, path, info)
}

// SetSlot mocks base method.
func (m *MockNode) SetSlot(manager NodeManager, thisId NodeId, address *common.Address, path []Nibble, key *common.Key, value *common.Value) (NodeId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSlot", manager, thisId, address, path, key, value)
	ret0, _ := ret[0].(NodeId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetSlot indicates an expected call of SetSlot.
func (mr *MockNodeMockRecorder) SetSlot(manager, thisId, address, path, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSlot", reflect.TypeOf((*MockNode)(nil).SetSlot), manager, thisId, address, path, key, value)
}

// SetValue mocks base method.
func (m *MockNode) SetValue(manager NodeManager, thisId NodeId, key *common.Key, path []Nibble, value *common.Value) (NodeId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValue", manager, thisId, key, path, value)
	ret0, _ := ret[0].(NodeId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetValue indicates an expected call of SetValue.
func (mr *MockNodeMockRecorder) SetValue(manager, thisId, key, path, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockNode)(nil).SetValue), manager, thisId, key, path, value)
}

// MockNodeSource is a mock of NodeSource interface.
type MockNodeSource struct {
	ctrl     *gomock.Controller
	recorder *MockNodeSourceMockRecorder
}

// MockNodeSourceMockRecorder is the mock recorder for MockNodeSource.
type MockNodeSourceMockRecorder struct {
	mock *MockNodeSource
}

// NewMockNodeSource creates a new mock instance.
func NewMockNodeSource(ctrl *gomock.Controller) *MockNodeSource {
	mock := &MockNodeSource{ctrl: ctrl}
	mock.recorder = &MockNodeSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeSource) EXPECT() *MockNodeSourceMockRecorder {
	return m.recorder
}

// getNode mocks base method.
func (m *MockNodeSource) getNode(arg0 NodeId) (Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getNode", arg0)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getNode indicates an expected call of getNode.
func (mr *MockNodeSourceMockRecorder) getNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getNode", reflect.TypeOf((*MockNodeSource)(nil).getNode), arg0)
}

// MockNodeManager is a mock of NodeManager interface.
type MockNodeManager struct {
	ctrl     *gomock.Controller
	recorder *MockNodeManagerMockRecorder
}

// MockNodeManagerMockRecorder is the mock recorder for MockNodeManager.
type MockNodeManagerMockRecorder struct {
	mock *MockNodeManager
}

// NewMockNodeManager creates a new mock instance.
func NewMockNodeManager(ctrl *gomock.Controller) *MockNodeManager {
	mock := &MockNodeManager{ctrl: ctrl}
	mock.recorder = &MockNodeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeManager) EXPECT() *MockNodeManagerMockRecorder {
	return m.recorder
}

// createAccount mocks base method.
func (m *MockNodeManager) createAccount() (NodeId, *AccountNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createAccount")
	ret0, _ := ret[0].(NodeId)
	ret1, _ := ret[1].(*AccountNode)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// createAccount indicates an expected call of createAccount.
func (mr *MockNodeManagerMockRecorder) createAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createAccount", reflect.TypeOf((*MockNodeManager)(nil).createAccount))
}

// createBranch mocks base method.
func (m *MockNodeManager) createBranch() (NodeId, *BranchNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createBranch")
	ret0, _ := ret[0].(NodeId)
	ret1, _ := ret[1].(*BranchNode)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// createBranch indicates an expected call of createBranch.
func (mr *MockNodeManagerMockRecorder) createBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createBranch", reflect.TypeOf((*MockNodeManager)(nil).createBranch))
}

// createExtension mocks base method.
func (m *MockNodeManager) createExtension() (NodeId, *ExtensionNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createExtension")
	ret0, _ := ret[0].(NodeId)
	ret1, _ := ret[1].(*ExtensionNode)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// createExtension indicates an expected call of createExtension.
func (mr *MockNodeManagerMockRecorder) createExtension() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createExtension", reflect.TypeOf((*MockNodeManager)(nil).createExtension))
}

// createValue mocks base method.
func (m *MockNodeManager) createValue() (NodeId, *ValueNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createValue")
	ret0, _ := ret[0].(NodeId)
	ret1, _ := ret[1].(*ValueNode)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// createValue indicates an expected call of createValue.
func (mr *MockNodeManagerMockRecorder) createValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createValue", reflect.TypeOf((*MockNodeManager)(nil).createValue))
}

// getNode mocks base method.
func (m *MockNodeManager) getNode(arg0 NodeId) (Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getNode", arg0)
	ret0, _ := ret[0].(Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getNode indicates an expected call of getNode.
func (mr *MockNodeManagerMockRecorder) getNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getNode", reflect.TypeOf((*MockNodeManager)(nil).getNode), arg0)
}

// invalidateHash mocks base method.
func (m *MockNodeManager) invalidateHash(arg0 NodeId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "invalidateHash", arg0)
}

// invalidateHash indicates an expected call of invalidateHash.
func (mr *MockNodeManagerMockRecorder) invalidateHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "invalidateHash", reflect.TypeOf((*MockNodeManager)(nil).invalidateHash), arg0)
}

// release mocks base method.
func (m *MockNodeManager) release(arg0 NodeId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "release", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// release indicates an expected call of release.
func (mr *MockNodeManagerMockRecorder) release(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "release", reflect.TypeOf((*MockNodeManager)(nil).release), arg0)
}

// update mocks base method.
func (m *MockNodeManager) update(arg0 NodeId, arg1 Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// update indicates an expected call of update.
func (mr *MockNodeManagerMockRecorder) update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "update", reflect.TypeOf((*MockNodeManager)(nil).update), arg0, arg1)
}
