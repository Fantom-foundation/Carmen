// Code generated by MockGen. DO NOT EDIT.
// Source: fuzzing.go
//
// Generated by this command:
//
//	mockgen -source fuzzing.go -destination fuzzing_mocks.go -package fuzzing
//
// Package fuzzing is a generated GoMock package.
package fuzzing

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOperation is a mock of Operation interface.
type MockOperation[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockOperationMockRecorder[T]
}

// MockOperationMockRecorder is the mock recorder for MockOperation.
type MockOperationMockRecorder[T any] struct {
	mock *MockOperation[T]
}

// NewMockOperation creates a new mock instance.
func NewMockOperation[T any](ctrl *gomock.Controller) *MockOperation[T] {
	mock := &MockOperation[T]{ctrl: ctrl}
	mock.recorder = &MockOperationMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperation[T]) EXPECT() *MockOperationMockRecorder[T] {
	return m.recorder
}

// Apply mocks base method.
func (m *MockOperation[T]) Apply(context *T) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Apply", context)
}

// Apply indicates an expected call of Apply.
func (mr *MockOperationMockRecorder[T]) Apply(context any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockOperation[T])(nil).Apply), context)
}

// Serialize mocks base method.
func (m *MockOperation[T]) Serialize() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Serialize indicates an expected call of Serialize.
func (mr *MockOperationMockRecorder[T]) Serialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockOperation[T])(nil).Serialize))
}

// MockCampaign is a mock of Campaign interface.
type MockCampaign[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignMockRecorder[T]
}

// MockCampaignMockRecorder is the mock recorder for MockCampaign.
type MockCampaignMockRecorder[T any] struct {
	mock *MockCampaign[T]
}

// NewMockCampaign creates a new mock instance.
func NewMockCampaign[T any](ctrl *gomock.Controller) *MockCampaign[T] {
	mock := &MockCampaign[T]{ctrl: ctrl}
	mock.recorder = &MockCampaignMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaign[T]) EXPECT() *MockCampaignMockRecorder[T] {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockCampaign[T]) Cleanup(context *T) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup", context)
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockCampaignMockRecorder[T]) Cleanup(context any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockCampaign[T])(nil).Cleanup), context)
}

// CreateContext mocks base method.
func (m *MockCampaign[T]) CreateContext() *T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContext")
	ret0, _ := ret[0].(*T)
	return ret0
}

// CreateContext indicates an expected call of CreateContext.
func (mr *MockCampaignMockRecorder[T]) CreateContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContext", reflect.TypeOf((*MockCampaign[T])(nil).CreateContext))
}

// Deserialize mocks base method.
func (m *MockCampaign[T]) Deserialize(arg0 []byte) []Operation[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deserialize", arg0)
	ret0, _ := ret[0].([]Operation[T])
	return ret0
}

// Deserialize indicates an expected call of Deserialize.
func (mr *MockCampaignMockRecorder[T]) Deserialize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deserialize", reflect.TypeOf((*MockCampaign[T])(nil).Deserialize), arg0)
}

// Init mocks base method.
func (m *MockCampaign[T]) Init() []OperationSequence[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].([]OperationSequence[T])
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockCampaignMockRecorder[T]) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockCampaign[T])(nil).Init))
}

// MockTestingF is a mock of TestingF interface.
type MockTestingF struct {
	ctrl     *gomock.Controller
	recorder *MockTestingFMockRecorder
}

// MockTestingFMockRecorder is the mock recorder for MockTestingF.
type MockTestingFMockRecorder struct {
	mock *MockTestingF
}

// NewMockTestingF creates a new mock instance.
func NewMockTestingF(ctrl *gomock.Controller) *MockTestingF {
	mock := &MockTestingF{ctrl: ctrl}
	mock.recorder = &MockTestingFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestingF) EXPECT() *MockTestingFMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTestingF) Add(args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Add", varargs...)
}

// Add indicates an expected call of Add.
func (mr *MockTestingFMockRecorder) Add(args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTestingF)(nil).Add), args...)
}

// Fuzz mocks base method.
func (m *MockTestingF) Fuzz(ff any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fuzz", ff)
}

// Fuzz indicates an expected call of Fuzz.
func (mr *MockTestingFMockRecorder) Fuzz(ff any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fuzz", reflect.TypeOf((*MockTestingF)(nil).Fuzz), ff)
}
