// Copyright (c) 2024 Fantom Foundation
//
// Use of this software is governed by the Business Source License included
// in the LICENSE file and at fantom.foundation/bsl11.
//
// Change Date: 2028-4-16
//
// On the date above, in accordance with the Business Source License, use of
// this software will be governed by the GNU Lesser General Public License v3.

// Code generated by MockGen. DO NOT EDIT.
// Source: live.go
//
// Generated by this command:
//
//	mockgen -source live.go -destination live_mocks.go -package io
//
// Package io is a generated GoMock package.
package io

import (
	reflect "reflect"

	common "github.com/Fantom-foundation/Carmen/go/common"
	mpt "github.com/Fantom-foundation/Carmen/go/database/mpt"
	gomock "go.uber.org/mock/gomock"
)

// MockmptStateVisitor is a mock of mptStateVisitor interface.
type MockmptStateVisitor struct {
	ctrl     *gomock.Controller
	recorder *MockmptStateVisitorMockRecorder
}

// MockmptStateVisitorMockRecorder is the mock recorder for MockmptStateVisitor.
type MockmptStateVisitorMockRecorder struct {
	mock *MockmptStateVisitor
}

// NewMockmptStateVisitor creates a new mock instance.
func NewMockmptStateVisitor(ctrl *gomock.Controller) *MockmptStateVisitor {
	mock := &MockmptStateVisitor{ctrl: ctrl}
	mock.recorder = &MockmptStateVisitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmptStateVisitor) EXPECT() *MockmptStateVisitorMockRecorder {
	return m.recorder
}

// GetCodeForHash mocks base method.
func (m *MockmptStateVisitor) GetCodeForHash(arg0 common.Hash) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeForHash", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCodeForHash indicates an expected call of GetCodeForHash.
func (mr *MockmptStateVisitorMockRecorder) GetCodeForHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeForHash", reflect.TypeOf((*MockmptStateVisitor)(nil).GetCodeForHash), arg0)
}

// GetHash mocks base method.
func (m *MockmptStateVisitor) GetHash() (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHash indicates an expected call of GetHash.
func (mr *MockmptStateVisitorMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockmptStateVisitor)(nil).GetHash))
}

// Visit mocks base method.
func (m *MockmptStateVisitor) Visit(visitor noResponseNodeVisitor, pruneStorage bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Visit", visitor, pruneStorage)
	ret0, _ := ret[0].(error)
	return ret0
}

// Visit indicates an expected call of Visit.
func (mr *MockmptStateVisitorMockRecorder) Visit(visitor, pruneStorage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Visit", reflect.TypeOf((*MockmptStateVisitor)(nil).Visit), visitor, pruneStorage)
}

// MocknoResponseNodeVisitor is a mock of noResponseNodeVisitor interface.
type MocknoResponseNodeVisitor struct {
	ctrl     *gomock.Controller
	recorder *MocknoResponseNodeVisitorMockRecorder
}

// MocknoResponseNodeVisitorMockRecorder is the mock recorder for MocknoResponseNodeVisitor.
type MocknoResponseNodeVisitorMockRecorder struct {
	mock *MocknoResponseNodeVisitor
}

// NewMocknoResponseNodeVisitor creates a new mock instance.
func NewMocknoResponseNodeVisitor(ctrl *gomock.Controller) *MocknoResponseNodeVisitor {
	mock := &MocknoResponseNodeVisitor{ctrl: ctrl}
	mock.recorder = &MocknoResponseNodeVisitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknoResponseNodeVisitor) EXPECT() *MocknoResponseNodeVisitorMockRecorder {
	return m.recorder
}

// Visit mocks base method.
func (m *MocknoResponseNodeVisitor) Visit(arg0 mpt.Node, arg1 mpt.NodeInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Visit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Visit indicates an expected call of Visit.
func (mr *MocknoResponseNodeVisitorMockRecorder) Visit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Visit", reflect.TypeOf((*MocknoResponseNodeVisitor)(nil).Visit), arg0, arg1)
}
