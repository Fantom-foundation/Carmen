// Copyright (c) 2024 Fantom Foundation
//
// Use of this software is governed by the Business Source License included
// in the LICENSE file and at fantom.foundation/bsl11.
//
// Change Date: 2028-4-16
//
// On the date above, in accordance with the Business Source License, use of
// this software will be governed by the GNU Lesser General Public License v3.

// Code generated by MockGen. DO NOT EDIT.
// Source: parallel_visit.go
//
// Generated by this command:
//
//	mockgen -source parallel_visit.go -destination parallel_visit_mocks.go -package io
//
// Package io is a generated GoMock package.
package io

import (
	reflect "reflect"

	mpt "github.com/Fantom-foundation/Carmen/go/database/mpt"
	gomock "go.uber.org/mock/gomock"
)

// MockNodeSourceFactory is a mock of nodeSourceFactory interface.
type MockNodeSourceFactory struct {
	ctrl     *gomock.Controller
	recorder *MockNodeSourceFactoryMockRecorder
}

// MockNodeSourceFactoryMockRecorder is the mock recorder for MockNodeSourceFactory.
type MockNodeSourceFactoryMockRecorder struct {
	mock *MockNodeSourceFactory
}

// NewMockNodeSourceFactory creates a new mock instance.
func NewMockNodeSourceFactory(ctrl *gomock.Controller) *MockNodeSourceFactory {
	mock := &MockNodeSourceFactory{ctrl: ctrl}
	mock.recorder = &MockNodeSourceFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeSourceFactory) EXPECT() *MockNodeSourceFactoryMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockNodeSourceFactory) Open() (nodeSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(nodeSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockNodeSourceFactoryMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockNodeSourceFactory)(nil).Open))
}

// MockNodeSource is a mock of nodeSource interface.
type MockNodeSource struct {
	ctrl     *gomock.Controller
	recorder *MockNodeSourceMockRecorder
}

// MockNodeSourceMockRecorder is the mock recorder for MockNodeSource.
type MockNodeSourceMockRecorder struct {
	mock *MockNodeSource
}

// NewMockNodeSource creates a new mock instance.
func NewMockNodeSource(ctrl *gomock.Controller) *MockNodeSource {
	mock := &MockNodeSource{ctrl: ctrl}
	mock.recorder = &MockNodeSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeSource) EXPECT() *MockNodeSourceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockNodeSource) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockNodeSourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNodeSource)(nil).Close))
}

// Get mocks base method.
func (m *MockNodeSource) Get(arg0 mpt.NodeId) (mpt.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(mpt.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNodeSourceMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNodeSource)(nil).Get), arg0)
}
